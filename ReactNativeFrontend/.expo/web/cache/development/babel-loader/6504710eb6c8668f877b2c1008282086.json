{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport Routing from \"./Routing\";\nimport { store, view } from '@risingstack/react-easy-state';\nvar colorScheme = {\n  primaryColor: \"#16335C\",\n  secondaryColor: \"#FF4B63\"\n};\nvar lan = store({\n  lang: 'en'\n});\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isReady: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({\n                Roboto: require('native-base/Fonts/Roboto.ttf'),\n                Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf')\n              }, Ionicons.font)));\n\n            case 2:\n              this.setState({\n                isReady: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isReady) {\n        return React.createElement(AppLoading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 20\n          }\n        });\n      }\n\n      return React.createElement(Routing, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default view(App);","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/App.js"],"names":["React","AppLoading","Font","Ionicons","Routing","store","view","colorScheme","primaryColor","secondaryColor","lan","lang","App","props","state","isReady","loadAsync","Roboto","require","Roboto_medium","font","setState","Component"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,MAAzB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,OAAOC,OAAP;AACA,SAASC,KAAT,EAAeC,IAAf,QAA0B,+BAA1B;AAEA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,YAAY,EAAE,SADE;AAEhBC,EAAAA,cAAc,EAAE;AAFA,CAApB;AAKA,IAAMC,GAAG,GAAGL,KAAK,CAAC;AAAEM,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAjB;;IAGMC,G;;;;;AACF,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAFe;AAKlB;;;;;;;;;;+CAGSb,IAAI,CAACc,SAAL;AACFC,gBAAAA,MAAM,EAAEC,OAAO,CAAC,8BAAD,CADb;AAEFC,gBAAAA,aAAa,EAAED,OAAO,CAAC,qCAAD;AAFpB,iBAGCf,QAAQ,CAACiB,IAHV,E;;;AAKN,mBAAKC,QAAL,CAAc;AAACN,gBAAAA,OAAO,EAAE;AAAV,eAAd;;;;;;;;;;;6BAGK;AACL,UAAI,CAAC,KAAKD,KAAL,CAAWC,OAAhB,EAAyB;AACrB,eAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AAED,aACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;;;;EAzBaf,KAAK,CAACsB,S;;AA4BxB,eAAehB,IAAI,CAACM,GAAD,CAAnB","sourcesContent":["import React from 'react';\nimport {AppLoading} from 'expo';\nimport * as Font from 'expo-font';\nimport {Ionicons} from '@expo/vector-icons';\nimport Routing from './Routing';\nimport { store,view} from '@risingstack/react-easy-state';\n\nconst colorScheme = {\n    primaryColor: \"#16335C\",\n    secondaryColor: \"#FF4B63\"\n};\n\nconst lan = store({ lang: 'en' });\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false,\n        };\n    }\n\n    async componentDidMount() {\n        await Font.loadAsync({\n            Roboto: require('native-base/Fonts/Roboto.ttf'),\n            Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf'),\n            ...Ionicons.font,\n        });\n        this.setState({isReady: true});\n    }\n\n    render() {\n        if (!this.state.isReady) {\n            return <AppLoading/>;\n        }\n\n        return (\n            <Routing/>\n        );\n    }\n}\n\nexport default view(App);"]},"metadata":{},"sourceType":"module"}