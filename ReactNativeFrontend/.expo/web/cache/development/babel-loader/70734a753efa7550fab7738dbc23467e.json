{"ast":null,"code":"'use strict';\n\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var phonecall = function phonecall(phoneNumber, prompt) {\n  if (arguments.length !== 2) {\n    console.log('you must supply exactly 2 arguments');\n    return;\n  }\n\n  if (!isCorrectType('String', phoneNumber)) {\n    console.log('the phone number must be provided as a String value');\n    return;\n  }\n\n  if (!isCorrectType('Boolean', prompt)) {\n    console.log('the prompt parameter must be a Boolean');\n    return;\n  }\n\n  var url;\n\n  if (Platform.OS !== 'android') {\n    url = prompt ? 'telprompt:' : 'tel:';\n  } else {\n    url = 'tel:';\n  }\n\n  url += phoneNumber;\n  LaunchURL(url);\n};\nexport var email = function email(to, cc, bcc, subject, body) {\n  var url = 'mailto:';\n  var argLength = arguments.length;\n\n  switch (argLength) {\n    case 0:\n      LaunchURL(url);\n      return;\n\n    case 5:\n      break;\n\n    default:\n      console.log('you must supply either 0 or 5 arguments. You supplied ' + argLength);\n      return;\n  }\n\n  var valueAdded = false;\n\n  if (isCorrectType('Array', arguments[0])) {\n    var validAddresses = getValidArgumentsFromArray(arguments[0], 'String');\n\n    if (validAddresses.length > 0) {\n      url += encodeURIComponent(validAddresses.join(','));\n    }\n  }\n\n  url += '?';\n\n  if (isCorrectType('Array', arguments[1])) {\n    var _validAddresses = getValidArgumentsFromArray(arguments[1], 'String');\n\n    if (_validAddresses.length > 0) {\n      valueAdded = true;\n      url += 'cc=' + encodeURIComponent(_validAddresses.join(','));\n    }\n  }\n\n  if (isCorrectType('Array', arguments[2])) {\n    if (valueAdded) {\n      url += '&';\n    }\n\n    var _validAddresses2 = getValidArgumentsFromArray(arguments[2], 'String');\n\n    if (_validAddresses2.length > 0) {\n      valueAdded = true;\n      url += 'bcc=' + encodeURIComponent(_validAddresses2.join(','));\n    }\n  }\n\n  if (isCorrectType('String', arguments[3])) {\n    if (valueAdded) {\n      url += '&';\n    }\n\n    valueAdded = true;\n    url += 'subject=' + encodeURIComponent(arguments[3]);\n  }\n\n  if (isCorrectType('String', arguments[4])) {\n    if (valueAdded) {\n      url += '&';\n    }\n\n    url += 'body=' + encodeURIComponent(arguments[4]);\n  }\n\n  LaunchURL(url);\n};\nexport var text = function text() {\n  var phoneNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (arguments.length > 2) {\n    console.log('you supplied too many arguments. You can either supply 0 or 1 or 2');\n    return;\n  }\n\n  var url = 'sms:';\n\n  if (phoneNumber) {\n    if (isCorrectType('String', phoneNumber)) {\n      url += phoneNumber;\n    } else {\n      console.log('the phone number should be provided as a string. It was provided as ' + Object.prototype.toString.call(phoneNumber).slice(8, -1) + ',ignoring the value provided');\n    }\n  }\n\n  if (body) {\n    if (isCorrectType('String', body)) {\n      if (Platform.OS === 'android') body = encodeURIComponent(body);\n      url += Platform.OS === 'ios' ? \"&body=\" + encodeURIComponent(body) : \"?body=\" + encodeURIComponent(body);\n    } else {\n      console.log('the body should be provided as a string. It was provided as ' + Object.prototype.toString.call(body).slice(8, -1) + ',ignoring the value provided');\n    }\n  }\n\n  LaunchURL(url);\n};\nexport var textWithoutEncoding = function textWithoutEncoding() {\n  var phoneNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (arguments.length > 2) {\n    console.log('you supplied too many arguments. You can either supply 0 or 1 or 2');\n    return;\n  }\n\n  var url = 'sms:';\n\n  if (phoneNumber) {\n    if (isCorrectType('String', phoneNumber)) {\n      url += phoneNumber;\n    } else {\n      console.log('the phone number should be provided as a string. It was provided as ' + Object.prototype.toString.call(phoneNumber).slice(8, -1) + ',ignoring the value provided');\n    }\n  }\n\n  if (body) {\n    if (isCorrectType('String', body)) {\n      url += Platform.OS === 'ios' ? \"&body=\" + body : \"?body=\" + body;\n    } else {\n      console.log('the body should be provided as a string. It was provided as ' + Object.prototype.toString.call(body).slice(8, -1) + ',ignoring the value provided');\n    }\n  }\n\n  LaunchURL(url);\n};\nexport var web = function web() {\n  var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (!address) {\n    console.log('Missing address argument');\n    return;\n  }\n\n  if (!isCorrectType('String', address)) {\n    console.log('address was not provided as a string, it was provided as ' + Object.prototype.toString.call(address).slice(8, -1));\n    return;\n  }\n\n  LaunchURL(address);\n};\n\nvar LaunchURL = function LaunchURL(url) {\n  Linking.canOpenURL(url).then(function (supported) {\n    if (!supported) {\n      console.log('Can\\'t handle url: ' + url);\n    } else {\n      Linking.openURL(url).catch(function (err) {\n        if (url.includes('telprompt')) {} else {\n          console.warn('openURL error', err);\n        }\n      });\n    }\n  }).catch(function (err) {\n    return console.warn('An unexpected error happened', err);\n  });\n};\n\nvar getValidArgumentsFromArray = function getValidArgumentsFromArray(array, type) {\n  var validValues = [];\n  array.forEach(function (value) {\n    if (isCorrectType(type, value)) {\n      validValues.push(value);\n    }\n  });\n  return validValues;\n};\n\nvar isCorrectType = function isCorrectType(expected, actual) {\n  return Object.prototype.toString.call(actual).slice(8, -1) === expected;\n};\n\nexport default {\n  phonecall: phonecall,\n  text: text,\n  textWithoutEncoding: textWithoutEncoding,\n  email: email,\n  web: web\n};","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/react-native-communications/AKCommunications.js"],"names":["phonecall","phoneNumber","prompt","arguments","length","console","log","isCorrectType","url","Platform","OS","LaunchURL","email","to","cc","bcc","subject","body","argLength","valueAdded","validAddresses","getValidArgumentsFromArray","encodeURIComponent","join","text","Object","prototype","toString","call","slice","textWithoutEncoding","web","address","Linking","canOpenURL","then","supported","openURL","catch","err","includes","warn","array","type","validValues","forEach","value","push","expected","actual"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n\tLinking,\n\tPlatform,\n} from 'react-native';\n\nexport const phonecall = function(phoneNumber, prompt) {\n\tif(arguments.length !== 2) {\n\t\t\tconsole.log('you must supply exactly 2 arguments');\n\t\t\treturn;\n\t\t}\n\n\t\tif(!isCorrectType('String', phoneNumber)) {\n\t\t\tconsole.log('the phone number must be provided as a String value');\n\t\t\treturn;\n\t\t}\n\n\t\tif(!isCorrectType('Boolean', prompt)) {\n\t\t\tconsole.log('the prompt parameter must be a Boolean');\n\t\t\treturn;\n\t\t}\n\n\t\tlet url;\n\n\t\tif(Platform.OS !== 'android') {\n\t\t\turl = prompt ? 'telprompt:' : 'tel:';\n\t\t}\n\t\telse {\n\t\t\turl = 'tel:';\n\t\t}\n\n\t\turl += phoneNumber;\n\n\t\tLaunchURL(url);\n}\n\nexport const email = function(to, cc, bcc, subject, body) {\n\tlet url = 'mailto:';\n\t\tlet argLength = arguments.length;\n\n\t\tswitch(argLength) {\n\t\t\tcase 0:\n\t\t\t\tLaunchURL(url);\n\t\t\t\treturn;\n\t\t\tcase 5:\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('you must supply either 0 or 5 arguments. You supplied ' + argLength);\n\t\t\t\treturn;\n\t\t}\n\n\t\t// we use this Boolean to keep track of when we add a new parameter to the querystring\n\t\t// it helps us know when we need to add & to separate parameters\n\t\tlet valueAdded = false;\n\n\t\tif(isCorrectType('Array', arguments[0])) {\n\t\t\tlet validAddresses = getValidArgumentsFromArray(arguments[0], 'String');\n\n\t\t\tif(validAddresses.length > 0) {\n\t\t\t\turl += encodeURIComponent(validAddresses.join(','));\n\t\t\t}\n\t\t}\n\n\t\turl += '?';\n\n\t\tif(isCorrectType('Array', arguments[1])) {\n\t\t\tlet validAddresses = getValidArgumentsFromArray(arguments[1], 'String');\n\n\t\t\tif(validAddresses.length > 0) {\n\t\t\t\tvalueAdded = true;\n\t\t\t\turl += 'cc=' + encodeURIComponent(validAddresses.join(','));\n\t\t\t}\n\t\t}\n\n\t\tif(isCorrectType('Array', arguments[2])) {\n\t\t\tif(valueAdded) {\n\t\t\t\turl += '&';\n\t\t\t}\n\n\t\t\tlet validAddresses = getValidArgumentsFromArray(arguments[2], 'String');\n\n\t\t\tif(validAddresses.length > 0) {\n\t\t\t\tvalueAdded = true;\n\t\t\t\turl += 'bcc=' + encodeURIComponent(validAddresses.join(','));\n\t\t\t}\n\t\t}\n\n\t\tif(isCorrectType('String', arguments[3])) {\n\t\t\tif(valueAdded) {\n\t\t\t\turl += '&';\n\t\t\t}\n\n\t\t\tvalueAdded = true;\n\t\t\turl += 'subject=' + encodeURIComponent(arguments[3]);\n\t\t}\n\n\t\tif(isCorrectType('String', arguments[4])) {\n\t\t\tif(valueAdded) {\n\t\t\t\turl += '&';\n\t\t\t}\n\n\t\t\turl += 'body=' + encodeURIComponent(arguments[4]);\n\t\t}\n\n\t\tLaunchURL(url);\n}\n\nexport const text = function(phoneNumber = null, body = null) {\n\tif(arguments.length > 2) {\n\t\t\tconsole.log('you supplied too many arguments. You can either supply 0 or 1 or 2');\n\t\t\treturn;\n\t\t}\n\n\t\tlet url = 'sms:';\n\n\t\tif(phoneNumber) {\n\t\t\tif(isCorrectType('String', phoneNumber)) {\n\t\t\t\turl += phoneNumber;\n\t\t\t} else {\n\t\t\t\tconsole.log('the phone number should be provided as a string. It was provided as '\n\t\t\t\t\t+ Object.prototype.toString.call(phoneNumber).slice(8, -1)\n\t\t\t\t\t+ ',ignoring the value provided');\n\t\t\t}\n\t\t}\n\n\t\tif(body) {\n\t\t\tif(isCorrectType('String', body)) {\n\t\t\t\t// for some strange reason android seems to have issues with ampersands in the body unless it is encoded twice!\n\t\t\t\t// iOS only needs encoding once\n\t\t\t\tif(Platform.OS === 'android') body = encodeURIComponent(body);\n\t\t\t\turl += Platform.OS === 'ios' ? `&body=${encodeURIComponent(body)}` : `?body=${encodeURIComponent(body)}`;\n\t\t\t} else {\n\t\t\t\tconsole.log('the body should be provided as a string. It was provided as '\n\t\t\t\t\t+ Object.prototype.toString.call(body).slice(8, -1)\n\t\t\t\t\t+ ',ignoring the value provided');\n\t\t\t}\n\t\t}\n\n\t\tLaunchURL(url);\n}\n\nexport const textWithoutEncoding = function(phoneNumber = null, body = null) {\n\tif(arguments.length > 2) {\n\t\t\tconsole.log('you supplied too many arguments. You can either supply 0 or 1 or 2');\n\t\t\treturn;\n\t\t}\n\n\t\tlet url = 'sms:';\n\n\t\tif(phoneNumber) {\n\t\t\tif(isCorrectType('String', phoneNumber)) {\n\t\t\t\turl += phoneNumber;\n\t\t\t} else {\n\t\t\t\tconsole.log('the phone number should be provided as a string. It was provided as '\n\t\t\t\t\t+ Object.prototype.toString.call(phoneNumber).slice(8, -1)\n\t\t\t\t\t+ ',ignoring the value provided');\n\t\t\t}\n\t\t}\n\n\t\tif(body) {\n\t\t\tif(isCorrectType('String', body)) {\n\t\t\t\turl += Platform.OS === 'ios' ? `&body=${body}` : `?body=${body}`;\n\t\t\t} else {\n\t\t\t\tconsole.log('the body should be provided as a string. It was provided as '\n\t\t\t\t\t+ Object.prototype.toString.call(body).slice(8, -1)\n\t\t\t\t\t+ ',ignoring the value provided');\n\t\t\t}\n\t\t}\n\n\t\tLaunchURL(url);\n}\n\nexport const web = (address = null) => {\n\tif(!address) {\n      console.log('Missing address argument');\n      return;\n    }\n    if(!isCorrectType('String', address)) {\n    \tconsole.log('address was not provided as a string, it was provided as '\n    \t\t+ Object.prototype.toString.call(address).slice(8, -1));\n    \treturn;\n    }\n    LaunchURL(address);\n}\n\nconst LaunchURL = function(url) {\n\tLinking.canOpenURL(url).then(supported => {\n\t\tif(!supported) {\n\t\t\tconsole.log('Can\\'t handle url: ' + url);\n\t\t} else {\n\t\t\tLinking.openURL(url)\n\t\t\t.catch(err => {\n\t\t\t\tif(url.includes('telprompt')) {\n\t\t\t\t\t// telprompt was cancelled and Linking openURL method sees this as an error\n\t\t\t\t\t// it is not a true error so ignore it to prevent apps crashing\n\t\t\t\t\t// see https://github.com/anarchicknight/react-native-communications/issues/39\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('openURL error', err)\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}).catch(err => console.warn('An unexpected error happened', err));\n};\n\nconst getValidArgumentsFromArray = function(array, type) {\n\tvar validValues = [];\n\tarray.forEach(function(value) {\n\t\tif(isCorrectType(type, value)) {\n\t\t\tvalidValues.push(value);\n\t\t}\n\t});\n\n\treturn validValues;\n};\n\nconst isCorrectType = function(expected, actual) {\n\treturn Object.prototype.toString.call(actual).slice(8, -1) === expected;\n};\n\nexport default { phonecall, text, textWithoutEncoding, email, web }\n"]},"metadata":{},"sourceType":"module"}