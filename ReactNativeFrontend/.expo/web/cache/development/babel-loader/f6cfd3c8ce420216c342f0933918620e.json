{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport '@expo/browser-polyfill';\nimport * as filters from 'pixi-filters';\nimport * as PixiInstance from 'pixi.js';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { resolveAsync } from 'expo-asset-utils';\nglobal.PIXI = global.PIXI || PixiInstance;\nvar PIXI = global.PIXI;\nPIXI.filters = _objectSpread(_objectSpread({}, PIXI.filters || {}), filters);\n\nvar ExpoPIXIApplication = function (_PIXI$Application) {\n  _inherits(ExpoPIXIApplication, _PIXI$Application);\n\n  var _super = _createSuper(ExpoPIXIApplication);\n\n  function ExpoPIXIApplication(_ref) {\n    var _this;\n\n    var width = _ref.width,\n        height = _ref.height,\n        scale = _ref.scale,\n        backgroundColor = _ref.backgroundColor,\n        context = _ref.context,\n        props = _objectWithoutProperties(_ref, [\"width\", \"height\", \"scale\", \"backgroundColor\", \"context\"]);\n\n    _classCallCheck(this, ExpoPIXIApplication);\n\n    if (!context) throw new Error('expo-pixi: new Application({ context: null }): context must be a valid WebGL context.');\n\n    if (Platform.OS !== 'web') {\n      var getAttributes = context.getContextAttributes || function () {\n        return {};\n      };\n\n      context.getContextAttributes = function () {\n        var contextAttributes = getAttributes();\n        return _objectSpread(_objectSpread({}, contextAttributes), {}, {\n          stencil: true\n        });\n      };\n    }\n\n    var resolution = scale || 1;\n    _this = _super.call(this, _objectSpread({\n      context: context,\n      resolution: resolution,\n      width: width || context.drawingBufferWidth / resolution,\n      height: height || context.drawingBufferHeight / resolution,\n      backgroundColor: backgroundColor\n    }, props));\n\n    _this.ticker.add(function () {\n      return context.endFrameEXP();\n    });\n\n    return _this;\n  }\n\n  return ExpoPIXIApplication;\n}(PIXI.Application);\n\nvar isAsset = function isAsset(input) {\n  return input && typeof input.width === 'number' && typeof input.height === 'number' && typeof input.localUri === 'string';\n};\n\nif (!(PIXI.Application instanceof ExpoPIXIApplication)) {\n  var _global = global,\n      HTMLImageElement = _global.HTMLImageElement;\n\n  var textureFromExpoAsync = function textureFromExpoAsync(resource) {\n    var asset;\n    return _regeneratorRuntime.async(function textureFromExpoAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            asset = resource;\n\n            if (!(Platform.OS !== 'web')) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(resolveAsync(resource));\n\n          case 4:\n            asset = _context.sent;\n\n          case 5:\n            return _context.abrupt(\"return\", PIXI.Texture.from(asset));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var spriteFromExpoAsync = function spriteFromExpoAsync(resource) {\n    var texture;\n    return _regeneratorRuntime.async(function spriteFromExpoAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(textureFromExpoAsync(resource));\n\n          case 2:\n            texture = _context2.sent;\n            return _context2.abrupt(\"return\", PIXI.Sprite.from(texture));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var originalSpriteFrom = PIXI.Sprite.from;\n  var originalTextureFrom = PIXI.Texture.from;\n  PIXI = _objectSpread(_objectSpread({}, PIXI), {}, {\n    Application: ExpoPIXIApplication,\n    Texture: _objectSpread(_objectSpread({}, PIXI.Texture), {}, {\n      from: function from() {\n        if (Platform.OS === 'web') {\n          return originalTextureFrom.apply(void 0, arguments);\n        }\n\n        if (arguments.length && (arguments.length <= 0 ? undefined : arguments[0])) {\n          var asset = arguments.length <= 0 ? undefined : arguments[0];\n\n          if (isAsset(asset)) {\n            if (asset instanceof HTMLImageElement) {\n              return originalTextureFrom(asset);\n            } else {\n              return originalTextureFrom(new HTMLImageElement(asset));\n            }\n          } else if (typeof asset === 'string' || typeof asset === 'number') {\n            console.warn(\"PIXI.Texture.from(asset: \" + typeof asset + \") is not supported. Returning a Promise!\");\n            return textureFromExpoAsync(asset);\n          }\n        }\n\n        return originalTextureFrom.apply(void 0, arguments);\n      },\n      fromExpoAsync: textureFromExpoAsync\n    }),\n    Sprite: _objectSpread(_objectSpread({}, PIXI.Sprite), {}, {\n      fromExpoAsync: spriteFromExpoAsync,\n      from: function from() {\n        if (Platform.OS === 'web') {\n          return originalSpriteFrom.apply(void 0, arguments);\n        }\n\n        if (arguments.length && (arguments.length <= 0 ? undefined : arguments[0])) {\n          var asset = arguments.length <= 0 ? undefined : arguments[0];\n\n          if (isAsset(asset)) {\n            var image = new HTMLImageElement(asset);\n            return originalSpriteFrom(image);\n          } else if (typeof asset === 'string' || typeof asset === 'number') {\n            console.warn(\"PIXI.Sprite.from(asset: \" + typeof asset + \") is not supported. Returning a Promise!\");\n            return spriteFromExpoAsync(asset);\n          }\n        }\n\n        return originalSpriteFrom.apply(void 0, arguments);\n      }\n    })\n  });\n}\n\nexport default PIXI;","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-pixi/lib/Pixi.js"],"names":["filters","PixiInstance","resolveAsync","global","PIXI","ExpoPIXIApplication","width","height","scale","backgroundColor","context","props","Error","Platform","OS","getAttributes","getContextAttributes","contextAttributes","stencil","resolution","drawingBufferWidth","drawingBufferHeight","ticker","add","endFrameEXP","Application","isAsset","input","localUri","HTMLImageElement","textureFromExpoAsync","resource","asset","Texture","from","spriteFromExpoAsync","texture","Sprite","originalSpriteFrom","originalTextureFrom","length","console","warn","fromExpoAsync","image"],"mappings":"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","sourcesContent":["import '@expo/browser-polyfill';\n\nimport * as filters from 'pixi-filters';\nimport * as PixiInstance from 'pixi.js';\nimport { Platform } from 'react-native';\nimport { resolveAsync } from 'expo-asset-utils';\n\nglobal.PIXI = global.PIXI || PixiInstance;\nlet PIXI = global.PIXI;\nPIXI.filters = { ...(PIXI.filters || {}), ...filters };\n\nclass ExpoPIXIApplication extends PIXI.Application {\n  constructor({ width, height, scale, backgroundColor, context, ...props }) {\n    if (!context)\n      throw new Error(\n        'expo-pixi: new Application({ context: null }): context must be a valid WebGL context.'\n      );\n\n    if (Platform.OS !== 'web') {\n      // Shim stencil buffer attribute\n      const getAttributes = context.getContextAttributes || (() => ({}));\n      context.getContextAttributes = () => {\n        const contextAttributes = getAttributes();\n        return {\n          ...contextAttributes,\n          stencil: true,\n        };\n      };\n    }\n\n    const resolution = scale || 1; //PixelRatio.get();\n    super({\n      context,\n      resolution,\n      width: width || context.drawingBufferWidth / resolution,\n      height: height || context.drawingBufferHeight / resolution,\n      backgroundColor,\n      ...props,\n    });\n    this.ticker.add(() => context.endFrameEXP());\n  }\n}\n\nconst isAsset = input => {\n  return (\n    input &&\n    typeof input.width === 'number' &&\n    typeof input.height === 'number' &&\n    typeof input.localUri === 'string'\n  );\n};\n\nif (!(PIXI.Application instanceof ExpoPIXIApplication)) {\n  const { HTMLImageElement } = global;\n\n  const textureFromExpoAsync = async resource => {\n    let asset = resource;\n    if (Platform.OS !== 'web') {\n      asset = await resolveAsync(resource);\n    }\n    return PIXI.Texture.from(asset);\n  };\n\n  const spriteFromExpoAsync = async resource => {\n    const texture = await textureFromExpoAsync(resource);\n    return PIXI.Sprite.from(texture);\n  };\n\n  const originalSpriteFrom = PIXI.Sprite.from;\n  const originalTextureFrom = PIXI.Texture.from;\n  PIXI = {\n    ...PIXI,\n    Application: ExpoPIXIApplication,\n    Texture: {\n      ...PIXI.Texture,\n      from: (...props) => {\n        if (Platform.OS === 'web') {\n          return originalTextureFrom(...props);\n        }\n        if (props.length && props[0]) {\n          let asset = props[0];\n          if (isAsset(asset)) {\n            if (asset instanceof HTMLImageElement) {\n              return originalTextureFrom(asset);\n            } else {\n              return originalTextureFrom(new HTMLImageElement(asset));\n            }\n          } else if (typeof asset === 'string' || typeof asset === 'number') {\n            console.warn(\n              `PIXI.Texture.from(asset: ${typeof asset}) is not supported. Returning a Promise!`\n            );\n            return textureFromExpoAsync(asset);\n          }\n        }\n        return originalTextureFrom(...props);\n      },\n      fromExpoAsync: textureFromExpoAsync,\n    },\n    Sprite: {\n      ...PIXI.Sprite,\n      fromExpoAsync: spriteFromExpoAsync,\n      from: (...props) => {\n        if (Platform.OS === 'web') {\n          return originalSpriteFrom(...props);\n        }\n        if (props.length && props[0]) {\n          let asset = props[0];\n          if (isAsset(asset)) {\n            const image = new HTMLImageElement(asset);\n            return originalSpriteFrom(image);\n          } else if (typeof asset === 'string' || typeof asset === 'number') {\n            console.warn(\n              `PIXI.Sprite.from(asset: ${typeof asset}) is not supported. Returning a Promise!`\n            );\n            return spriteFromExpoAsync(asset);\n          }\n        }\n\n        return originalSpriteFrom(...props);\n      },\n    },\n  };\n}\n\nexport default PIXI;\n"]},"metadata":{},"sourceType":"module"}