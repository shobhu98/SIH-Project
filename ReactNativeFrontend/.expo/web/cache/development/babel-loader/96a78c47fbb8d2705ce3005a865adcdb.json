{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Asset } from 'expo-asset';\nimport { getSizeAsync } from \"./ImageUtils\";\nimport fileInfoAsync from \"./fileInfoAsync\";\n\nfunction isImageType(type) {\n  return type.match(/(jpeg|jpg|gif|png|bmp)$/) != null;\n}\n\nfunction getExtension(url) {\n  return url.split('.').pop().split('?')[0].split('#')[0].toLowerCase();\n}\n\nfunction fromUriAsync(remoteUri, fileName) {\n  var _await$fileInfoAsync, uri, name, hash, type, width, height, size;\n\n  return _regeneratorRuntime.async(function fromUriAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fileInfoAsync(remoteUri, fileName));\n\n        case 2:\n          _await$fileInfoAsync = _context.sent;\n          uri = _await$fileInfoAsync.uri;\n          name = _await$fileInfoAsync.name;\n          hash = _await$fileInfoAsync.hash;\n\n          if (!uri) {\n            _context.next = 17;\n            break;\n          }\n\n          type = getExtension(name);\n          width = undefined;\n          height = undefined;\n\n          if (!isImageType(type)) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(getSizeAsync(uri));\n\n        case 13:\n          size = _context.sent;\n          width = size.width;\n          height = size.height;\n\n        case 16:\n          return _context.abrupt(\"return\", new Asset({\n            name: name,\n            type: type,\n            hash: hash,\n            uri: uri,\n            width: width,\n            height: height\n          }));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default fromUriAsync;","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-asset-utils/src/fromUriAsync.js"],"names":["Asset","getSizeAsync","fileInfoAsync","isImageType","type","match","getExtension","url","split","pop","toLowerCase","fromUriAsync","remoteUri","fileName","uri","name","hash","width","undefined","height","size"],"mappings":";AACA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,YAAT;AACA,OAAOC,aAAP;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA4C;AAC1C,SAAOA,IAAI,CAACC,KAAL,CAAW,yBAAX,KAAyC,IAAhD;AACD;;AAED,SAASC,YAAT,CAAsBC,GAAtB,EAA2C;AACzC,SAAOA,GAAG,CACPC,KADI,CACE,GADF,EAEJC,GAFI,GAGJD,KAHI,CAGE,GAHF,EAGO,CAHP,EAIJA,KAJI,CAIE,GAJF,EAIO,CAJP,EAKJE,WALI,EAAP;AAMD;;AAED,SAAeC,YAAf,CAA4BC,SAA5B,EAA+CC,QAA/C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACoCX,aAAa,CAACU,SAAD,EAAYC,QAAZ,CADjD;;AAAA;AAAA;AACUC,UAAAA,GADV,wBACUA,GADV;AACeC,UAAAA,IADf,wBACeA,IADf;AACqBC,UAAAA,IADrB,wBACqBA,IADrB;;AAAA,eAGMF,GAHN;AAAA;AAAA;AAAA;;AAIUV,UAAAA,IAJV,GAIiBE,YAAY,CAACS,IAAD,CAJ7B;AAKQE,UAAAA,KALR,GAKgBC,SALhB;AAMQC,UAAAA,MANR,GAMiBD,SANjB;;AAAA,eAOQf,WAAW,CAACC,IAAD,CAPnB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAQyBH,YAAY,CAACa,GAAD,CARrC;;AAAA;AAQYM,UAAAA,IARZ;AASMH,UAAAA,KAAK,GAAGG,IAAI,CAACH,KAAb;AACAE,UAAAA,MAAM,GAAGC,IAAI,CAACD,MAAd;;AAVN;AAAA,2CAaW,IAAInB,KAAJ,CAAU;AAAEe,YAAAA,IAAI,EAAJA,IAAF;AAAQX,YAAAA,IAAI,EAAJA,IAAR;AAAcY,YAAAA,IAAI,EAAJA,IAAd;AAAoBF,YAAAA,GAAG,EAAHA,GAApB;AAAyBG,YAAAA,KAAK,EAALA,KAAzB;AAAgCE,YAAAA,MAAM,EAANA;AAAhC,WAAV,CAbX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,eAAeR,YAAf","sourcesContent":["// @flow\nimport { Asset } from 'expo-asset';\nimport { getSizeAsync } from './ImageUtils';\nimport fileInfoAsync from './fileInfoAsync';\n\nfunction isImageType(type: string): boolean {\n  return type.match(/(jpeg|jpg|gif|png|bmp)$/) != null;\n}\n\nfunction getExtension(url: string): string {\n  return url\n    .split('.')\n    .pop()\n    .split('?')[0]\n    .split('#')[0]\n    .toLowerCase();\n}\n\nasync function fromUriAsync(remoteUri: string, fileName: ?string): Promise<Asset> {\n  const { uri, name, hash } = await fileInfoAsync(remoteUri, fileName);\n\n  if (uri) {\n    const type = getExtension(name);\n    let width = undefined;\n    let height = undefined;\n    if (isImageType(type)) {\n      const size = await getSizeAsync(uri);\n      width = size.width;\n      height = size.height;\n    }\n\n    return new Asset({ name, type, hash, uri, width, height });\n  }\n}\n\nexport default fromUriAsync;\n"]},"metadata":{},"sourceType":"module"}