{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/react-native-lightbox/LightboxOverlay.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar WINDOW_HEIGHT = Dimensions.get('window').height;\nvar WINDOW_WIDTH = Dimensions.get('window').width;\nvar DRAG_DISMISS_THRESHOLD = 150;\nvar STATUS_BAR_OFFSET = Platform.OS === 'android' ? -25 : 0;\nvar isIOS = Platform.OS === 'ios';\nvar styles = StyleSheet.create({\n  background: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: WINDOW_WIDTH,\n    height: WINDOW_HEIGHT\n  },\n  open: {\n    position: 'absolute',\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'transparent'\n  },\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: WINDOW_WIDTH,\n    backgroundColor: 'transparent'\n  },\n  closeButton: {\n    fontSize: 35,\n    color: 'white',\n    lineHeight: 40,\n    width: 40,\n    textAlign: 'center',\n    shadowOffset: {\n      width: 0,\n      height: 0\n    },\n    shadowRadius: 1.5,\n    shadowColor: 'black',\n    shadowOpacity: 0.8\n  }\n});\n\nvar LightboxOverlay = function (_Component) {\n  _inherits(LightboxOverlay, _Component);\n\n  var _super = _createSuper(LightboxOverlay);\n\n  function LightboxOverlay(props) {\n    var _this;\n\n    _classCallCheck(this, LightboxOverlay);\n\n    _this = _super.call(this, props);\n\n    _this.open = function () {\n      if (isIOS) {\n        StatusBar.setHidden(true, 'fade');\n      }\n\n      _this.state.pan.setValue(0);\n\n      _this.setState({\n        isAnimating: true,\n        target: {\n          x: 0,\n          y: 0,\n          opacity: 1\n        }\n      });\n\n      Animated.spring(_this.state.openVal, _objectSpread({\n        toValue: 1\n      }, _this.props.springConfig)).start(function () {\n        _this.setState({\n          isAnimating: false\n        });\n\n        _this.props.didOpen();\n      });\n    };\n\n    _this.close = function () {\n      _this.props.willClose();\n\n      if (isIOS) {\n        StatusBar.setHidden(false, 'fade');\n      }\n\n      _this.setState({\n        isAnimating: true\n      });\n\n      Animated.spring(_this.state.openVal, _objectSpread({\n        toValue: 0\n      }, _this.props.springConfig)).start(function () {\n        _this.setState({\n          isAnimating: false\n        });\n\n        _this.props.onClose();\n      });\n    };\n\n    _this.state = {\n      isAnimating: false,\n      isPanning: false,\n      target: {\n        x: 0,\n        y: 0,\n        opacity: 1\n      },\n      pan: new Animated.Value(0),\n      openVal: new Animated.Value(0)\n    };\n    _this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: function onStartShouldSetPanResponder(evt, gestureState) {\n        return !_this.state.isAnimating;\n      },\n      onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(evt, gestureState) {\n        return !_this.state.isAnimating;\n      },\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {\n        return !_this.state.isAnimating;\n      },\n      onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {\n        return !_this.state.isAnimating;\n      },\n      onPanResponderGrant: function onPanResponderGrant(evt, gestureState) {\n        _this.state.pan.setValue(0);\n\n        _this.setState({\n          isPanning: true\n        });\n      },\n      onPanResponderMove: Animated.event([null, {\n        dy: _this.state.pan\n      }]),\n      onPanResponderTerminationRequest: function onPanResponderTerminationRequest(evt, gestureState) {\n        return true;\n      },\n      onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {\n        if (Math.abs(gestureState.dy) > DRAG_DISMISS_THRESHOLD) {\n          _this.setState({\n            isPanning: false,\n            target: {\n              y: gestureState.dy,\n              x: gestureState.dx,\n              opacity: 1 - Math.abs(gestureState.dy / WINDOW_HEIGHT)\n            }\n          });\n\n          _this.close();\n        } else {\n          Animated.spring(_this.state.pan, _objectSpread({\n            toValue: 0\n          }, _this.props.springConfig)).start(function () {\n            _this.setState({\n              isPanning: false\n            });\n          });\n        }\n      }\n    });\n    return _this;\n  }\n\n  _createClass(LightboxOverlay, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isOpen) {\n        this.open();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.isOpen !== prevProps.isOpen && this.props.isOpen) {\n        this.open();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          renderHeader = _this$props.renderHeader,\n          swipeToDismiss = _this$props.swipeToDismiss,\n          origin = _this$props.origin,\n          backgroundColor = _this$props.backgroundColor;\n      var _this$state = this.state,\n          isPanning = _this$state.isPanning,\n          isAnimating = _this$state.isAnimating,\n          openVal = _this$state.openVal,\n          target = _this$state.target;\n      var lightboxOpacityStyle = {\n        opacity: openVal.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, target.opacity]\n        })\n      };\n      var handlers;\n\n      if (swipeToDismiss) {\n        handlers = this._panResponder.panHandlers;\n      }\n\n      var dragStyle;\n\n      if (isPanning) {\n        dragStyle = {\n          top: this.state.pan\n        };\n        lightboxOpacityStyle.opacity = this.state.pan.interpolate({\n          inputRange: [-WINDOW_HEIGHT, 0, WINDOW_HEIGHT],\n          outputRange: [0, 1, 0]\n        });\n      }\n\n      var openStyle = [styles.open, {\n        left: openVal.interpolate({\n          inputRange: [0, 1],\n          outputRange: [origin.x, target.x]\n        }),\n        top: openVal.interpolate({\n          inputRange: [0, 1],\n          outputRange: [origin.y + STATUS_BAR_OFFSET, target.y + STATUS_BAR_OFFSET]\n        }),\n        width: openVal.interpolate({\n          inputRange: [0, 1],\n          outputRange: [origin.width, WINDOW_WIDTH]\n        }),\n        height: openVal.interpolate({\n          inputRange: [0, 1],\n          outputRange: [origin.height, WINDOW_HEIGHT]\n        })\n      }];\n      var background = React.createElement(Animated.View, {\n        style: [styles.background, {\n          backgroundColor: backgroundColor\n        }, lightboxOpacityStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }\n      });\n      var header = React.createElement(Animated.View, {\n        style: [styles.header, lightboxOpacityStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }\n      }, renderHeader ? renderHeader(this.close) : React.createElement(TouchableOpacity, {\n        onPress: this.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.closeButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }\n      }, \"\\xD7\")));\n      var content = React.createElement(Animated.View, _extends({\n        style: [openStyle, dragStyle]\n      }, handlers, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 7\n        }\n      }), this.props.children);\n\n      if (this.props.navigator) {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 9\n          }\n        }, background, content, header);\n      }\n\n      return React.createElement(Modal, {\n        visible: isOpen,\n        transparent: true,\n        onRequestClose: function onRequestClose() {\n          return _this2.close();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 7\n        }\n      }, background, content, header);\n    }\n  }]);\n\n  return LightboxOverlay;\n}(Component);\n\nLightboxOverlay.propTypes = {\n  origin: PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  springConfig: PropTypes.shape({\n    tension: PropTypes.number,\n    friction: PropTypes.number\n  }),\n  backgroundColor: PropTypes.string,\n  isOpen: PropTypes.bool,\n  renderHeader: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  willClose: PropTypes.func,\n  swipeToDismiss: PropTypes.bool\n};\nLightboxOverlay.defaultProps = {\n  springConfig: {\n    tension: 30,\n    friction: 7\n  },\n  backgroundColor: 'black'\n};\nexport { LightboxOverlay as default };","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/react-native-lightbox/LightboxOverlay.js"],"names":["React","Component","PropTypes","WINDOW_HEIGHT","Dimensions","get","height","WINDOW_WIDTH","width","DRAG_DISMISS_THRESHOLD","STATUS_BAR_OFFSET","Platform","OS","isIOS","styles","StyleSheet","create","background","position","top","left","open","flex","justifyContent","backgroundColor","header","closeButton","fontSize","color","lineHeight","textAlign","shadowOffset","shadowRadius","shadowColor","shadowOpacity","LightboxOverlay","props","StatusBar","setHidden","state","pan","setValue","setState","isAnimating","target","x","y","opacity","Animated","spring","openVal","toValue","springConfig","start","didOpen","close","willClose","onClose","isPanning","Value","_panResponder","PanResponder","onStartShouldSetPanResponder","evt","gestureState","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderGrant","onPanResponderMove","event","dy","onPanResponderTerminationRequest","onPanResponderRelease","Math","abs","dx","isOpen","prevProps","renderHeader","swipeToDismiss","origin","lightboxOpacityStyle","interpolate","inputRange","outputRange","handlers","panHandlers","dragStyle","openStyle","content","children","navigator","propTypes","shape","number","tension","friction","string","bool","func","onOpen","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Dimensions, Modal, PanResponder, Platform, StatusBar, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nconst WINDOW_HEIGHT = Dimensions.get('window').height;\nconst WINDOW_WIDTH = Dimensions.get('window').width;\nconst DRAG_DISMISS_THRESHOLD = 150;\nconst STATUS_BAR_OFFSET = (Platform.OS === 'android' ? -25 : 0);\nconst isIOS = Platform.OS === 'ios';\n\nconst styles = StyleSheet.create({\n  background: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: WINDOW_WIDTH,\n    height: WINDOW_HEIGHT,\n  },\n  open: {\n    position: 'absolute',\n    flex: 1,\n    justifyContent: 'center',\n    // Android pan handlers crash without this declaration:\n    backgroundColor: 'transparent',\n  },\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: WINDOW_WIDTH,\n    backgroundColor: 'transparent',\n  },\n  closeButton: {\n    fontSize: 35,\n    color: 'white',\n    lineHeight: 40,\n    width: 40,\n    textAlign: 'center',\n    shadowOffset: {\n      width: 0,\n      height: 0,\n    },\n    shadowRadius: 1.5,\n    shadowColor: 'black',\n    shadowOpacity: 0.8,\n  },\n});\n\nexport default class LightboxOverlay extends Component {\n  static propTypes = {\n    origin: PropTypes.shape({\n      x:        PropTypes.number,\n      y:        PropTypes.number,\n      width:    PropTypes.number,\n      height:   PropTypes.number,\n    }),\n    springConfig: PropTypes.shape({\n      tension:  PropTypes.number,\n      friction: PropTypes.number,\n    }),\n    backgroundColor: PropTypes.string,\n    isOpen:          PropTypes.bool,\n    renderHeader:    PropTypes.func,\n    onOpen:          PropTypes.func,\n    onClose:         PropTypes.func,\n    willClose:         PropTypes.func,\n    swipeToDismiss:  PropTypes.bool,\n  };\n\n  static defaultProps = {\n    springConfig: { tension: 30, friction: 7 },\n    backgroundColor: 'black',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAnimating: false,\n      isPanning: false,\n      target: {\n        x: 0,\n        y: 0,\n        opacity: 1,\n      },\n      pan: new Animated.Value(0),\n      openVal: new Animated.Value(0),\n    };\n    this._panResponder = PanResponder.create({\n      // Ask to be the responder:\n      onStartShouldSetPanResponder: (evt, gestureState) => !this.state.isAnimating,\n      onStartShouldSetPanResponderCapture: (evt, gestureState) => !this.state.isAnimating,\n      onMoveShouldSetPanResponder: (evt, gestureState) => !this.state.isAnimating,\n      onMoveShouldSetPanResponderCapture: (evt, gestureState) => !this.state.isAnimating,\n\n      onPanResponderGrant: (evt, gestureState) => {\n        this.state.pan.setValue(0);\n        this.setState({ isPanning: true });\n      },\n      onPanResponderMove: Animated.event([\n        null,\n        { dy: this.state.pan }\n      ]),\n      onPanResponderTerminationRequest: (evt, gestureState) => true,\n      onPanResponderRelease: (evt, gestureState) => {\n        if(Math.abs(gestureState.dy) > DRAG_DISMISS_THRESHOLD) {\n          this.setState({\n            isPanning: false,\n            target: {\n              y: gestureState.dy,\n              x: gestureState.dx,\n              opacity: 1 - Math.abs(gestureState.dy / WINDOW_HEIGHT)\n            }\n          });\n          this.close();\n        } else {\n          Animated.spring(\n            this.state.pan,\n            { toValue: 0, ...this.props.springConfig }\n          ).start(() => { this.setState({ isPanning: false }); });\n        }\n      },\n    });\n  }\n\n  componentDidMount() {\n    if(this.props.isOpen) {\n      this.open();\n    }\n  }\n\n  open = () => {\n    if(isIOS) {\n      StatusBar.setHidden(true, 'fade');\n    }\n    this.state.pan.setValue(0);\n    this.setState({\n      isAnimating: true,\n      target: {\n        x: 0,\n        y: 0,\n        opacity: 1,\n      }\n    });\n\n    Animated.spring(\n      this.state.openVal,\n      { toValue: 1, ...this.props.springConfig }\n    ).start(() => {\n      this.setState({ isAnimating: false });\n      this.props.didOpen();\n    });\n  }\n\n  close = () => {\n    this.props.willClose();\n    if(isIOS) {\n      StatusBar.setHidden(false, 'fade');\n    }\n    this.setState({\n      isAnimating: true,\n    });\n    Animated.spring(\n      this.state.openVal,\n      { toValue: 0, ...this.props.springConfig }\n    ).start(() => {\n      this.setState({\n        isAnimating: false,\n      });\n      this.props.onClose();\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if(this.props.isOpen !== prevProps.isOpen && this.props.isOpen) {\n      this.open();\n    }\n  }\n\n  render() {\n    const {\n      isOpen,\n      renderHeader,\n      swipeToDismiss,\n      origin,\n      backgroundColor,\n    } = this.props;\n\n    const {\n      isPanning,\n      isAnimating,\n      openVal,\n      target,\n    } = this.state;\n\n    const lightboxOpacityStyle = {\n      opacity: openVal.interpolate({inputRange: [0, 1], outputRange: [0, target.opacity]})\n    };\n\n    let handlers;\n    if(swipeToDismiss) {\n      handlers = this._panResponder.panHandlers;\n    }\n\n    let dragStyle;\n    if(isPanning) {\n      dragStyle = {\n        top: this.state.pan,\n      };\n      lightboxOpacityStyle.opacity = this.state.pan.interpolate({inputRange: [-WINDOW_HEIGHT, 0, WINDOW_HEIGHT], outputRange: [0, 1, 0]});\n    }\n\n    const openStyle = [styles.open, {\n      left:   openVal.interpolate({inputRange: [0, 1], outputRange: [origin.x, target.x]}),\n      top:    openVal.interpolate({inputRange: [0, 1], outputRange: [origin.y + STATUS_BAR_OFFSET, target.y + STATUS_BAR_OFFSET]}),\n      width:  openVal.interpolate({inputRange: [0, 1], outputRange: [origin.width, WINDOW_WIDTH]}),\n      height: openVal.interpolate({inputRange: [0, 1], outputRange: [origin.height, WINDOW_HEIGHT]}),\n    }];\n\n    const background = (<Animated.View style={[styles.background, { backgroundColor: backgroundColor }, lightboxOpacityStyle]}></Animated.View>);\n    const header = (<Animated.View style={[styles.header, lightboxOpacityStyle]}>{(renderHeader ?\n      renderHeader(this.close) :\n      (\n        <TouchableOpacity onPress={this.close}>\n          <Text style={styles.closeButton}>×</Text>\n        </TouchableOpacity>\n      )\n    )}</Animated.View>);\n    const content = (\n      <Animated.View style={[openStyle, dragStyle]} {...handlers}>\n        {this.props.children}\n      </Animated.View>\n    );\n\n    if (this.props.navigator) {\n      return (\n        <View>\n          {background}\n          {content}\n          {header}\n        </View>\n      );\n    }\n\n    return (\n      <Modal visible={isOpen} transparent={true} onRequestClose={() => this.close()}>\n        {background}\n        {content}\n        {header}\n      </Modal>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}