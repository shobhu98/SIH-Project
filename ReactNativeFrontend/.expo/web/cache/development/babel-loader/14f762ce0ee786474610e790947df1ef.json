{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FileSystem from 'expo-file-system';\nimport { Platform } from '@unimodules/core';\nimport filenameFromUri from \"./filenameFromUri\";\n\nfunction isAssetLibraryUri(uri) {\n  return uri.toLowerCase().startsWith('assets-library://');\n}\n\nfunction isLocalUri(uri) {\n  return uri.toLowerCase().startsWith('file://');\n}\n\nfunction getHashAsync(uri) {\n  var _await$FileSystem$get, md5;\n\n  return _regeneratorRuntime.async(function getHashAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(uri, {\n            md5: true\n          }));\n\n        case 2:\n          _await$FileSystem$get = _context.sent;\n          md5 = _await$FileSystem$get.md5;\n          return _context.abrupt(\"return\", md5);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction resolveLocalFileAsync(_ref) {\n  var uri, name, hash;\n  return _regeneratorRuntime.async(function resolveLocalFileAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          uri = _ref.uri, name = _ref.name;\n\n          if (!(Platform.OS === 'web')) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {\n            uri: uri,\n            name: name,\n            hash: null\n          });\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(getHashAsync(uri));\n\n        case 5:\n          hash = _context2.sent;\n\n          if (hash) {\n            _context2.next = 8;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 8:\n          return _context2.abrupt(\"return\", {\n            uri: uri,\n            name: name,\n            hash: hash\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fileInfoAsync(url, name) {\n  var localUri, hash, file, _await$FileSystem$dow, uri, _hash;\n\n  return _regeneratorRuntime.async(function fileInfoAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (url) {\n            _context3.next = 3;\n            break;\n          }\n\n          throw new Error('expo-asset-utils: fileInfoAsync(): cannot load from empty url!');\n\n        case 3:\n          name = name || filenameFromUri(url);\n\n          if (!(Platform.OS === 'web')) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", {\n            uri: url,\n            name: name,\n            hash: null\n          });\n\n        case 6:\n          localUri = FileSystem.cacheDirectory + name;\n\n          if (!isAssetLibraryUri(url)) {\n            _context3.next = 16;\n            break;\n          }\n\n          _context3.next = 10;\n          return _regeneratorRuntime.awrap(FileSystem.copyAsync({\n            from: url,\n            to: localUri\n          }));\n\n        case 10:\n          _context3.next = 12;\n          return _regeneratorRuntime.awrap(getHashAsync(localUri));\n\n        case 12:\n          hash = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            uri: localUri,\n            name: name,\n            hash: hash\n          });\n\n        case 16:\n          if (!isLocalUri(url)) {\n            _context3.next = 30;\n            break;\n          }\n\n          _context3.next = 19;\n          return _regeneratorRuntime.awrap(resolveLocalFileAsync({\n            uri: url,\n            name: name\n          }));\n\n        case 19:\n          file = _context3.sent;\n\n          if (file) {\n            _context3.next = 27;\n            break;\n          }\n\n          _context3.next = 23;\n          return _regeneratorRuntime.awrap(resolveLocalFileAsync({\n            uri: localUri,\n            name: name\n          }));\n\n        case 23:\n          file = _context3.sent;\n\n          if (file) {\n            _context3.next = 27;\n            break;\n          }\n\n          throw new Error(\"expo-asset-utils: fileInfoAsync(): couldn't resolve md5 hash for local uri: \" + url + \" or alternate: \" + localUri);\n\n        case 27:\n          return _context3.abrupt(\"return\", file);\n\n        case 30:\n          _context3.next = 32;\n          return _regeneratorRuntime.awrap(FileSystem.downloadAsync(url, localUri, {\n            md5: true\n          }));\n\n        case 32:\n          _await$FileSystem$dow = _context3.sent;\n          uri = _await$FileSystem$dow.uri;\n          _hash = _await$FileSystem$dow.md5;\n          return _context3.abrupt(\"return\", {\n            uri: uri,\n            name: name,\n            hash: _hash\n          });\n\n        case 36:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default fileInfoAsync;","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-asset-utils/src/fileInfoAsync.js"],"names":["FileSystem","Platform","filenameFromUri","isAssetLibraryUri","uri","toLowerCase","startsWith","isLocalUri","getHashAsync","getInfoAsync","md5","resolveLocalFileAsync","name","OS","hash","fileInfoAsync","url","Error","localUri","cacheDirectory","copyAsync","from","to","file","downloadAsync"],"mappings":"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","sourcesContent":["// @flow\nimport * as FileSystem from 'expo-file-system';\nimport { Platform } from '@unimodules/core';\nimport filenameFromUri from './filenameFromUri';\n\nfunction isAssetLibraryUri(uri: string): boolean {\n  return uri.toLowerCase().startsWith('assets-library://');\n}\n\nfunction isLocalUri(uri: string): boolean {\n  return uri.toLowerCase().startsWith('file://');\n}\n\nasync function getHashAsync(uri: string): Promise<string> {\n  const { md5 } = await FileSystem.getInfoAsync(uri, { md5: true });\n  return md5;\n}\n\nexport type ImageData = {\n  uri: string,\n  name: string,\n  hash?: string,\n};\n\nasync function resolveLocalFileAsync({ uri, name }: ImageData): Promise<ImageData> {\n  if (Platform.OS === 'web') return { uri, name, hash: null };\n\n  const hash = await getHashAsync(uri);\n  if (!hash) {\n    return null;\n  }\n  return { uri, name, hash };\n}\n\nasync function fileInfoAsync(url: ?string, name: string): Promise<ImageData> {\n  if (!url) {\n    throw new Error('expo-asset-utils: fileInfoAsync(): cannot load from empty url!');\n    return null;\n  }\n  name = name || filenameFromUri(url);\n\n  if (Platform.OS === 'web') {\n    return { uri: url, name, hash: null };\n  }\n\n  const localUri = FileSystem.cacheDirectory + name;\n\n  if (isAssetLibraryUri(url)) {\n    /// ios asset: we need to copy this over and then get the hash\n    await FileSystem.copyAsync({\n      from: url,\n      to: localUri,\n    });\n    const hash = await getHashAsync(localUri);\n    return { uri: localUri, name, hash };\n  } else if (isLocalUri(url)) {\n    /// local image: we just need the hash\n    let file = await resolveLocalFileAsync({ uri: url, name });\n    if (!file) {\n      file = await resolveLocalFileAsync({ uri: localUri, name });\n      if (!file) {\n        throw new Error(\n          `expo-asset-utils: fileInfoAsync(): couldn't resolve md5 hash for local uri: ${url} or alternate: ${localUri}`\n        );\n        return null;\n      }\n    }\n    return file;\n  } else {\n    /// remote image: download first\n    const { uri, md5: hash } = await FileSystem.downloadAsync(url, localUri, {\n      md5: true,\n    });\n    return { uri, name, hash };\n  }\n}\nexport default fileInfoAsync;\n"]},"metadata":{},"sourceType":"module"}