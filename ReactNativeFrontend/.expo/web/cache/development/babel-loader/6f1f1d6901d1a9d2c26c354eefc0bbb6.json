{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar CheckboxIOS = function (_React$Component) {\n  _inherits(CheckboxIOS, _React$Component);\n\n  var _super = _createSuper(CheckboxIOS);\n\n  function CheckboxIOS() {\n    _classCallCheck(this, CheckboxIOS);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CheckboxIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          status = _this$props.status,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n\n      var checked = status === 'checked';\n      var indeterminate = status === 'indeterminate';\n      var checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;\n      var rippleColor;\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      }\n\n      var icon = indeterminate ? 'minus' : 'check';\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onPress,\n        disabled: disabled,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityState: {\n          disabled: disabled\n        },\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container\n      }), React.createElement(View, {\n        style: {\n          opacity: indeterminate || checked ? 1 : 0\n        }\n      }, React.createElement(MaterialCommunityIcon, {\n        allowFontScaling: false,\n        name: icon,\n        size: 24,\n        color: checkedColor,\n        direction: \"ltr\"\n      })));\n    }\n  }]);\n\n  return CheckboxIOS;\n}(React.Component);\n\n_defineProperty(CheckboxIOS, \"displayName\", 'Checkbox.IOS');\n\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(CheckboxIOS);\nexport { CheckboxIOS };","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","React","theme","checked","status","indeterminate","checkedColor","disabled","rippleColor","color","icon","styles","container","opacity","borderRadius","padding","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,qBAAA;AACA,OAAA,eAAA;AACA,SAAA,SAAA;;IAyCA,W;;;;;;;;;;;;;6BAGW;AACP,UAAA,WAAA,GAAsD,KAAtD,KAAA;AAAA,UAAM,MAAN,GAAA,WAAA,CAAM,MAAN;AAAA,UAAM,QAAN,GAAA,WAAA,CAAM,QAAN;AAAA,UAAM,OAAN,GAAA,WAAA,CAAM,OAAN;AAAA,UAAmCE,KAAnC,GAAA,WAAA,CAAmCA,KAAnC;AAAA,UAAA,IAAA,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,OAAA,CAAA,CAAA;;AACA,UAAMC,OAAO,GAAGC,MAAM,KAAtB,SAAA;AACA,UAAMC,aAAa,GAAGD,MAAM,KAA5B,eAAA;AAEA,UAAME,YAAY,GAAGC,QAAQ,GACzBL,KAAK,CAALA,MAAAA,CADyB,QAAA,GAEzB,KAAA,KAAA,CAAA,KAAA,IAAoBA,KAAK,CAALA,MAAAA,CAFxB,MAAA;AAIA,UAAA,WAAA;;AAEA,UAAA,QAAA,EAAc;AACZM,QAAAA,WAAW,GAAGC,KAAK,CAACP,KAAK,CAALA,MAAAA,CAANO,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAdD,MAAcC,EAAdD;AADF,OAAA,MAEO;AACLA,QAAAA,WAAW,GAAGC,KAAK,CAALA,YAAK,CAALA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAdD,MAAcC,EAAdD;AACD;;AAED,UAAME,IAAI,GAAGL,aAAa,GAAA,OAAA,GAA1B,OAAA;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,UAAU,EAFZ,IAAA;AAGE,QAAA,WAAW,EAHb,WAAA;AAIE,QAAA,OAAO,EAJT,OAAA;AAKE,QAAA,QAAQ,EALV,QAAA;AAME,QAAA,mBAAmB,EAAEE,QAAQ,GAAG,CAAA,QAAA,EAAH,UAAG,CAAH,GAN/B,QAAA;AAOE,QAAA,0BAA0B,EAP5B,QAAA;AAQE,QAAA,iBAAiB,EARnB,QAAA;AASE,QAAA,kBAAkB,EAAE;AAAEA,UAAAA,QAAAA,EAAAA;AAAF,SATtB;AAUE,QAAA,uBAAuB,EAVzB,QAAA;AAWE,QAAA,KAAK,EAAEI,MAAM,CAACC;AAXhB,OAAA,CAAA,EAaE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAER,aAAa,IAAbA,OAAAA,GAAAA,CAAAA,GAA+B;AAA1C;AAAb,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;AACE,QAAA,gBAAgB,EADlB,KAAA;AAEE,QAAA,IAAI,EAFN,IAAA;AAGE,QAAA,IAAI,EAHN,EAAA;AAIE,QAAA,KAAK,EAJP,YAAA;AAKE,QAAA,SAAS,EAAC;AALZ,OAAA,CADF,CAbF,CADF;AAyBD;;;;EA/CuBJ,KAAK,CAA/B,S;;gBAAMD,W,iBACiB,c;;AAiDvB,IAAMW,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTE,IAAAA,YAAY,EADH,EAAA;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;AAOA,eAAeC,SAAS,CAAxB,WAAwB,CAAxB;AAGA,SAAA,WAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxIOS extends React.Component<Props> {\n  static displayName = 'Checkbox.IOS';\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    }\n\n    const icon = indeterminate ? 'minus' : 'check';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkedColor}\n            direction=\"ltr\"\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}