{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/react-native-lightbox/Lightbox.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport LightboxOverlay from \"./LightboxOverlay\";\n\nvar Lightbox = function (_Component) {\n  _inherits(Lightbox, _Component);\n\n  var _super = _createSuper(Lightbox);\n\n  function Lightbox() {\n    var _this;\n\n    _classCallCheck(this, Lightbox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isOpen: false,\n      origin: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      },\n      layoutOpacity: new Animated.Value(1)\n    };\n\n    _this.getContent = function () {\n      if (_this.props.renderContent) {\n        return _this.props.renderContent();\n      } else if (_this.props.activeProps) {\n        return cloneElement(Children.only(_this.props.children), _this.props.activeProps);\n      }\n\n      return _this.props.children;\n    };\n\n    _this.getOverlayProps = function () {\n      return {\n        isOpen: _this.state.isOpen,\n        origin: _this.state.origin,\n        renderHeader: _this.props.renderHeader,\n        swipeToDismiss: _this.props.swipeToDismiss,\n        springConfig: _this.props.springConfig,\n        backgroundColor: _this.props.backgroundColor,\n        children: _this.getContent(),\n        didOpen: _this.props.didOpen,\n        willClose: _this.props.willClose,\n        onClose: _this.onClose\n      };\n    };\n\n    _this.open = function () {\n      _this._root.measure(function (ox, oy, width, height, px, py) {\n        _this.props.onOpen();\n\n        _this.setState({\n          isOpen: _this.props.navigator ? true : false,\n          isAnimating: true,\n          origin: {\n            width: width,\n            height: height,\n            x: px,\n            y: py\n          }\n        }, function () {\n          _this.props.didOpen();\n\n          if (_this.props.navigator) {\n            var route = {\n              component: LightboxOverlay,\n              passProps: _this.getOverlayProps()\n            };\n\n            var routes = _this.props.navigator.getCurrentRoutes();\n\n            routes.push(route);\n\n            _this.props.navigator.immediatelyResetRouteStack(routes);\n          } else {\n            _this.setState({\n              isOpen: true\n            });\n          }\n\n          setTimeout(function () {\n            _this._root && _this.state.layoutOpacity.setValue(0);\n          });\n        });\n      });\n    };\n\n    _this.close = function () {\n      throw new Error('Lightbox.close method is deprecated. Use renderHeader(close) prop instead.');\n    };\n\n    _this.onClose = function () {\n      _this.state.layoutOpacity.setValue(1);\n\n      _this.setState({\n        isOpen: false\n      }, _this.props.onClose);\n\n      if (_this.props.navigator) {\n        var routes = _this.props.navigator.getCurrentRoutes();\n\n        routes.pop();\n\n        _this.props.navigator.immediatelyResetRouteStack(routes);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Lightbox, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        ref: function ref(component) {\n          return _this2._root = component;\n        },\n        style: this.props.style,\n        onLayout: function onLayout() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        style: {\n          opacity: this.state.layoutOpacity\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableHighlight, {\n        underlayColor: this.props.underlayColor,\n        onPress: this.open,\n        onLongPress: this.props.onLongPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }, this.props.children)), this.props.navigator ? false : React.createElement(LightboxOverlay, _extends({}, this.getOverlayProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 41\n        }\n      })));\n    }\n  }]);\n\n  return Lightbox;\n}(Component);\n\nLightbox.propTypes = {\n  activeProps: PropTypes.object,\n  renderHeader: PropTypes.func,\n  renderContent: PropTypes.func,\n  underlayColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  didOpen: PropTypes.func,\n  onOpen: PropTypes.func,\n  willClose: PropTypes.func,\n  onClose: PropTypes.func,\n  springConfig: PropTypes.shape({\n    tension: PropTypes.number,\n    friction: PropTypes.number\n  }),\n  swipeToDismiss: PropTypes.bool\n};\nLightbox.defaultProps = {\n  swipeToDismiss: true,\n  onOpen: function onOpen() {},\n  didOpen: function didOpen() {},\n  willClose: function willClose() {},\n  onClose: function onClose() {},\n  onLongPress: function onLongPress() {}\n};\nexport { Lightbox as default };","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/react-native-lightbox/Lightbox.js"],"names":["React","Component","Children","cloneElement","PropTypes","LightboxOverlay","Lightbox","state","isOpen","origin","x","y","width","height","layoutOpacity","Animated","Value","getContent","props","renderContent","activeProps","only","children","getOverlayProps","renderHeader","swipeToDismiss","springConfig","backgroundColor","didOpen","willClose","onClose","open","_root","measure","ox","oy","px","py","onOpen","setState","navigator","isAnimating","route","component","passProps","routes","getCurrentRoutes","push","immediatelyResetRouteStack","setTimeout","setValue","close","Error","pop","style","opacity","underlayColor","onLongPress","propTypes","object","func","string","shape","tension","number","friction","bool","defaultProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,QAA5B,EAAsCC,YAAtC,QAA0D,OAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;AAGA,OAAOC,eAAP;;IAEqBC,Q;;;;;;;;;;;;;;;UA2BnBC,K,GAAQ;AACNC,MAAAA,MAAM,EAAE,KADF;AAENC,MAAAA,MAAM,EAAE;AACNC,QAAAA,CAAC,EAAE,CADG;AAENC,QAAAA,CAAC,EAAE,CAFG;AAGNC,QAAAA,KAAK,EAAE,CAHD;AAINC,QAAAA,MAAM,EAAE;AAJF,OAFF;AAQNC,MAAAA,aAAa,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB;AART,K;;UAWRC,U,GAAa,YAAM;AACjB,UAAG,MAAKC,KAAL,CAAWC,aAAd,EAA6B;AAC3B,eAAO,MAAKD,KAAL,CAAWC,aAAX,EAAP;AACD,OAFD,MAEO,IAAG,MAAKD,KAAL,CAAWE,WAAd,EAA2B;AAChC,eAAOjB,YAAY,CACjBD,QAAQ,CAACmB,IAAT,CAAc,MAAKH,KAAL,CAAWI,QAAzB,CADiB,EAEjB,MAAKJ,KAAL,CAAWE,WAFM,CAAnB;AAID;;AACD,aAAO,MAAKF,KAAL,CAAWI,QAAlB;AACD,K;;UAEDC,e,GAAkB;AAAA,aAAO;AACvBf,QAAAA,MAAM,EAAE,MAAKD,KAAL,CAAWC,MADI;AAEvBC,QAAAA,MAAM,EAAE,MAAKF,KAAL,CAAWE,MAFI;AAGvBe,QAAAA,YAAY,EAAE,MAAKN,KAAL,CAAWM,YAHF;AAIvBC,QAAAA,cAAc,EAAE,MAAKP,KAAL,CAAWO,cAJJ;AAKvBC,QAAAA,YAAY,EAAE,MAAKR,KAAL,CAAWQ,YALF;AAMvBC,QAAAA,eAAe,EAAE,MAAKT,KAAL,CAAWS,eANL;AAOvBL,QAAAA,QAAQ,EAAE,MAAKL,UAAL,EAPa;AAQvBW,QAAAA,OAAO,EAAE,MAAKV,KAAL,CAAWU,OARG;AASvBC,QAAAA,SAAS,EAAE,MAAKX,KAAL,CAAWW,SATC;AAUvBC,QAAAA,OAAO,EAAE,MAAKA;AAVS,OAAP;AAAA,K;;UAalBC,I,GAAO,YAAM;AACX,YAAKC,KAAL,CAAWC,OAAX,CAAmB,UAACC,EAAD,EAAKC,EAAL,EAASvB,KAAT,EAAgBC,MAAhB,EAAwBuB,EAAxB,EAA4BC,EAA5B,EAAmC;AACpD,cAAKnB,KAAL,CAAWoB,MAAX;;AAEA,cAAKC,QAAL,CAAc;AACZ/B,UAAAA,MAAM,EAAG,MAAKU,KAAL,CAAWsB,SAAX,GAAuB,IAAvB,GAA8B,KAD3B;AAEZC,UAAAA,WAAW,EAAE,IAFD;AAGZhC,UAAAA,MAAM,EAAE;AACNG,YAAAA,KAAK,EAALA,KADM;AAENC,YAAAA,MAAM,EAANA,MAFM;AAGNH,YAAAA,CAAC,EAAE0B,EAHG;AAINzB,YAAAA,CAAC,EAAE0B;AAJG;AAHI,SAAd,EASG,YAAM;AACP,gBAAKnB,KAAL,CAAWU,OAAX;;AACA,cAAG,MAAKV,KAAL,CAAWsB,SAAd,EAAyB;AACvB,gBAAME,KAAK,GAAG;AACZC,cAAAA,SAAS,EAAEtC,eADC;AAEZuC,cAAAA,SAAS,EAAE,MAAKrB,eAAL;AAFC,aAAd;;AAIA,gBAAMsB,MAAM,GAAG,MAAK3B,KAAL,CAAWsB,SAAX,CAAqBM,gBAArB,EAAf;;AACAD,YAAAA,MAAM,CAACE,IAAP,CAAYL,KAAZ;;AACA,kBAAKxB,KAAL,CAAWsB,SAAX,CAAqBQ,0BAArB,CAAgDH,MAAhD;AACD,WARD,MAQO;AACL,kBAAKN,QAAL,CAAc;AACZ/B,cAAAA,MAAM,EAAE;AADI,aAAd;AAGD;;AACDyC,UAAAA,UAAU,CAAC,YAAM;AACf,kBAAKjB,KAAL,IAAc,MAAKzB,KAAL,CAAWO,aAAX,CAAyBoC,QAAzB,CAAkC,CAAlC,CAAd;AACD,WAFS,CAAV;AAGD,SA3BD;AA4BD,OA/BD;AAgCD,K;;UAEDC,K,GAAQ,YAAM;AACZ,YAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACD,K;;UAEDtB,O,GAAU,YAAM;AACd,YAAKvB,KAAL,CAAWO,aAAX,CAAyBoC,QAAzB,CAAkC,CAAlC;;AACA,YAAKX,QAAL,CAAc;AACZ/B,QAAAA,MAAM,EAAE;AADI,OAAd,EAEG,MAAKU,KAAL,CAAWY,OAFd;;AAGA,UAAG,MAAKZ,KAAL,CAAWsB,SAAd,EAAyB;AACvB,YAAMK,MAAM,GAAG,MAAK3B,KAAL,CAAWsB,SAAX,CAAqBM,gBAArB,EAAf;;AACAD,QAAAA,MAAM,CAACQ,GAAP;;AACA,cAAKnC,KAAL,CAAWsB,SAAX,CAAqBQ,0BAArB,CAAgDH,MAAhD;AACD;AACF,K;;;;;;;6BAEQ;AAAA;;AAEP,aACE,oBAAC,IAAD;AACE,QAAA,GAAG,EAAE,aAAAF,SAAS;AAAA,iBAAI,MAAI,CAACX,KAAL,GAAaW,SAAjB;AAAA,SADhB;AAEE,QAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWoC,KAFpB;AAGE,QAAA,QAAQ,EAAE,oBAAM,CAAE,CAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE;AAACC,UAAAA,OAAO,EAAE,KAAKhD,KAAL,CAAWO;AAArB,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,kBAAD;AACE,QAAA,aAAa,EAAE,KAAKI,KAAL,CAAWsC,aAD5B;AAEE,QAAA,OAAO,EAAE,KAAKzB,IAFhB;AAGE,QAAA,WAAW,EAAE,KAAKb,KAAL,CAAWuC,WAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG,KAAKvC,KAAL,CAAWI,QALd,CADF,CALF,EAcG,KAAKJ,KAAL,CAAWsB,SAAX,GAAuB,KAAvB,GAA+B,oBAAC,eAAD,eAAqB,KAAKjB,eAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAdlC,CADF;AAkBD;;;;EAtImCtB,S;;AAAjBK,Q,CACZoD,S,GAAY;AACjBtC,EAAAA,WAAW,EAAMhB,SAAS,CAACuD,MADV;AAEjBnC,EAAAA,YAAY,EAAKpB,SAAS,CAACwD,IAFV;AAGjBzC,EAAAA,aAAa,EAAIf,SAAS,CAACwD,IAHV;AAIjBJ,EAAAA,aAAa,EAAIpD,SAAS,CAACyD,MAJV;AAKjBlC,EAAAA,eAAe,EAAEvB,SAAS,CAACyD,MALV;AAMjBjC,EAAAA,OAAO,EAAUxB,SAAS,CAACwD,IANV;AAOjBtB,EAAAA,MAAM,EAAWlC,SAAS,CAACwD,IAPV;AAQjB/B,EAAAA,SAAS,EAAQzB,SAAS,CAACwD,IARV;AASjB9B,EAAAA,OAAO,EAAU1B,SAAS,CAACwD,IATV;AAUjBlC,EAAAA,YAAY,EAAKtB,SAAS,CAAC0D,KAAV,CAAgB;AAC/BC,IAAAA,OAAO,EAAQ3D,SAAS,CAAC4D,MADM;AAE/BC,IAAAA,QAAQ,EAAO7D,SAAS,CAAC4D;AAFM,GAAhB,CAVA;AAcjBvC,EAAAA,cAAc,EAAGrB,SAAS,CAAC8D;AAdV,C;AADA5D,Q,CAkBZ6D,Y,GAAe;AACpB1C,EAAAA,cAAc,EAAE,IADI;AAEpBa,EAAAA,MAAM,EAAE,kBAAM,CAAE,CAFI;AAGpBV,EAAAA,OAAO,EAAE,mBAAM,CAAE,CAHG;AAIpBC,EAAAA,SAAS,EAAE,qBAAM,CAAE,CAJC;AAKpBC,EAAAA,OAAO,EAAE,mBAAM,CAAE,CALG;AAMpB2B,EAAAA,WAAW,EAAE,uBAAM,CAAE;AAND,C;SAlBHnD,Q","sourcesContent":["import React, { Component,  Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, TouchableHighlight, View } from 'react-native';\n\nimport LightboxOverlay from './LightboxOverlay';\n\nexport default class Lightbox extends Component {\n  static propTypes = {\n    activeProps:     PropTypes.object,\n    renderHeader:    PropTypes.func,\n    renderContent:   PropTypes.func,\n    underlayColor:   PropTypes.string,\n    backgroundColor: PropTypes.string,\n    didOpen:         PropTypes.func,\n    onOpen:          PropTypes.func,\n    willClose:       PropTypes.func,\n    onClose:         PropTypes.func,\n    springConfig:    PropTypes.shape({\n      tension:       PropTypes.number,\n      friction:      PropTypes.number,\n    }),\n    swipeToDismiss:  PropTypes.bool,\n  };\n\n  static defaultProps = {\n    swipeToDismiss: true,\n    onOpen: () => {},\n    didOpen: () => {},\n    willClose: () => {},\n    onClose: () => {},\n    onLongPress: () => {},\n  };\n\n  state = {\n    isOpen: false,\n    origin: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n    },\n    layoutOpacity: new Animated.Value(1),\n  };\n\n  getContent = () => {\n    if(this.props.renderContent) {\n      return this.props.renderContent();\n    } else if(this.props.activeProps) {\n      return cloneElement(\n        Children.only(this.props.children),\n        this.props.activeProps\n      );\n    }\n    return this.props.children;\n  }\n\n  getOverlayProps = () => ({\n    isOpen: this.state.isOpen,\n    origin: this.state.origin,\n    renderHeader: this.props.renderHeader,\n    swipeToDismiss: this.props.swipeToDismiss,\n    springConfig: this.props.springConfig,\n    backgroundColor: this.props.backgroundColor,\n    children: this.getContent(),\n    didOpen: this.props.didOpen,\n    willClose: this.props.willClose,\n    onClose: this.onClose,\n  })\n\n  open = () => {\n    this._root.measure((ox, oy, width, height, px, py) => {\n      this.props.onOpen();\n\n      this.setState({\n        isOpen: (this.props.navigator ? true : false),\n        isAnimating: true,\n        origin: {\n          width,\n          height,\n          x: px,\n          y: py,\n        },\n      }, () => {\n        this.props.didOpen();\n        if(this.props.navigator) {\n          const route = {\n            component: LightboxOverlay,\n            passProps: this.getOverlayProps(),\n          };\n          const routes = this.props.navigator.getCurrentRoutes();\n          routes.push(route);\n          this.props.navigator.immediatelyResetRouteStack(routes);\n        } else {\n          this.setState({\n            isOpen: true,\n          });\n        }\n        setTimeout(() => {\n          this._root && this.state.layoutOpacity.setValue(0);\n        });\n      });\n    });\n  }\n\n  close = () => {\n    throw new Error('Lightbox.close method is deprecated. Use renderHeader(close) prop instead.')\n  }\n\n  onClose = () => {\n    this.state.layoutOpacity.setValue(1);\n    this.setState({\n      isOpen: false,\n    }, this.props.onClose);\n    if(this.props.navigator) {\n      const routes = this.props.navigator.getCurrentRoutes();\n      routes.pop();\n      this.props.navigator.immediatelyResetRouteStack(routes);\n    }\n  }\n\n  render() {\n    // measure will not return anything useful if we dont attach a onLayout handler on android\n    return (\n      <View\n        ref={component => this._root = component}\n        style={this.props.style}\n        onLayout={() => {}}\n      >\n        <Animated.View style={{opacity: this.state.layoutOpacity}}>\n          <TouchableHighlight\n            underlayColor={this.props.underlayColor}\n            onPress={this.open}\n            onLongPress={this.props.onLongPress}\n          >\n            {this.props.children}\n          </TouchableHighlight>\n        </Animated.View>\n        {this.props.navigator ? false : <LightboxOverlay {...this.getOverlayProps()} />}\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}