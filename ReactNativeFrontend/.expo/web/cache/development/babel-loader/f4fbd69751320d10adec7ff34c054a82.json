{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/react-native-gifted-chat/lib/QuickReplies.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Color from \"./Color\";\nimport { warning, StylePropType } from \"./utils\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    maxWidth: 300\n  },\n  quickReply: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    maxWidth: 200,\n    paddingVertical: 7,\n    paddingHorizontal: 12,\n    minHeight: 50,\n    borderRadius: 13,\n    margin: 3\n  },\n  quickReplyText: {\n    overflow: 'visible'\n  },\n  sendLink: {\n    borderWidth: 0\n  },\n  sendLinkText: {\n    color: Color.defaultBlue,\n    fontWeight: '600',\n    fontSize: 17\n  }\n});\n\nvar sameReply = function sameReply(currentReply) {\n  return function (reply) {\n    return currentReply.value === reply.value;\n  };\n};\n\nvar diffReply = function diffReply(currentReply) {\n  return function (reply) {\n    return currentReply.value !== reply.value;\n  };\n};\n\nvar QuickReplies = function (_Component) {\n  _inherits(QuickReplies, _Component);\n\n  var _super = _createSuper(QuickReplies);\n\n  function QuickReplies() {\n    var _this;\n\n    _classCallCheck(this, QuickReplies);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      replies: []\n    };\n\n    _this.handlePress = function (reply) {\n      return function () {\n        var currentMessage = _this.props.currentMessage;\n        var replies = _this.state.replies;\n\n        if (currentMessage) {\n          var type = currentMessage.quickReplies.type;\n\n          switch (type) {\n            case 'radio':\n              {\n                _this.handleSend([reply])();\n\n                return;\n              }\n\n            case 'checkbox':\n              {\n                if (replies.find(sameReply(reply))) {\n                  _this.setState({\n                    replies: _this.state.replies.filter(diffReply(reply))\n                  });\n                } else {\n                  _this.setState({\n                    replies: [].concat(_toConsumableArray(_this.state.replies), [reply])\n                  });\n                }\n\n                return;\n              }\n\n            default:\n              {\n                warning(\"onQuickReply unknown type: \" + type);\n                return;\n              }\n          }\n        }\n      };\n    };\n\n    _this.handleSend = function (replies) {\n      return function () {\n        var currentMessage = _this.props.currentMessage;\n\n        if (_this.props.onQuickReply) {\n          _this.props.onQuickReply(replies.map(function (reply) {\n            return _objectSpread(_objectSpread({}, reply), {}, {\n              messageId: currentMessage._id\n            });\n          }));\n        }\n      };\n    };\n\n    _this.shouldComponentDisplay = function () {\n      var _this$props = _this.props,\n          currentMessage = _this$props.currentMessage,\n          nextMessage = _this$props.nextMessage;\n      var hasReplies = !!currentMessage && !!currentMessage.quickReplies;\n      var hasNext = !!nextMessage && !!nextMessage._id;\n      var keepIt = currentMessage.quickReplies.keepIt;\n\n      if (hasReplies && !hasNext) {\n        return true;\n      }\n\n      if (hasReplies && hasNext && keepIt) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.renderQuickReplySend = function () {\n      var replies = _this.state.replies;\n      var _this$props2 = _this.props,\n          sendText = _this$props2.sendText,\n          customSend = _this$props2.renderQuickReplySend;\n      return React.createElement(TouchableOpacity, {\n        style: [styles.quickReply, styles.sendLink],\n        onPress: _this.handleSend(replies),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }, customSend ? customSend() : React.createElement(Text, {\n        style: styles.sendLinkText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 41\n        }\n      }, sendText));\n    };\n\n    return _this;\n  }\n\n  _createClass(QuickReplies, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          currentMessage = _this$props3.currentMessage,\n          color = _this$props3.color,\n          quickReplyStyle = _this$props3.quickReplyStyle;\n      var replies = this.state.replies;\n\n      if (!this.shouldComponentDisplay()) {\n        return null;\n      }\n\n      var type = currentMessage.quickReplies.type;\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, currentMessage.quickReplies.values.map(function (reply, index) {\n        var selected = type === 'checkbox' && replies.find(sameReply(reply));\n        return React.createElement(TouchableOpacity, {\n          onPress: _this2.handlePress(reply),\n          style: [styles.quickReply, quickReplyStyle, {\n            borderColor: color\n          }, selected && {\n            backgroundColor: color\n          }],\n          key: reply.value + \"-\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }\n        }, React.createElement(Text, {\n          numberOfLines: 10,\n          ellipsizeMode: 'tail',\n          style: [styles.quickReplyText, {\n            color: selected ? Color.white : color\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }\n        }, reply.title));\n      }), replies.length > 0 && this.renderQuickReplySend());\n    }\n  }]);\n\n  return QuickReplies;\n}(Component);\n\nexport { QuickReplies as default };\nQuickReplies.defaultProps = {\n  currentMessage: {\n    quickReplies: []\n  },\n  onQuickReply: function onQuickReply() {},\n  color: Color.peterRiver,\n  sendText: 'Send',\n  keepReplies: false,\n  renderQuickReplySend: undefined,\n  quickReplyStyle: undefined\n};\nQuickReplies.propTypes = {\n  currentMessage: PropTypes.object.isRequired,\n  onQuickReply: PropTypes.func,\n  color: PropTypes.string,\n  sendText: PropTypes.string,\n  keepReplies: PropTypes.bool,\n  renderQuickReplySend: PropTypes.func,\n  quickReplyStyle: StylePropType\n};","map":{"version":3,"sources":["../src/QuickReplies.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Text, StyleSheet, View, TouchableOpacity, } from 'react-native';\nimport Color from './Color';\nimport { warning, StylePropType } from './utils';\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        maxWidth: 300,\n    },\n    quickReply: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1,\n        maxWidth: 200,\n        paddingVertical: 7,\n        paddingHorizontal: 12,\n        minHeight: 50,\n        borderRadius: 13,\n        margin: 3,\n    },\n    quickReplyText: {\n        overflow: 'visible',\n    },\n    sendLink: {\n        borderWidth: 0,\n    },\n    sendLinkText: {\n        color: Color.defaultBlue,\n        fontWeight: '600',\n        fontSize: 17,\n    },\n});\nconst sameReply = (currentReply) => (reply) => currentReply.value === reply.value;\nconst diffReply = (currentReply) => (reply) => currentReply.value !== reply.value;\nexport default class QuickReplies extends Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            replies: [],\n        };\n        this.handlePress = (reply) => () => {\n            const { currentMessage } = this.props;\n            const { replies } = this.state;\n            if (currentMessage) {\n                const { type } = currentMessage.quickReplies;\n                switch (type) {\n                    case 'radio': {\n                        this.handleSend([reply])();\n                        return;\n                    }\n                    case 'checkbox': {\n                        if (replies.find(sameReply(reply))) {\n                            this.setState({\n                                replies: this.state.replies.filter(diffReply(reply)),\n                            });\n                        }\n                        else {\n                            this.setState({ replies: [...this.state.replies, reply] });\n                        }\n                        return;\n                    }\n                    default: {\n                        warning(`onQuickReply unknown type: ${type}`);\n                        return;\n                    }\n                }\n            }\n        };\n        this.handleSend = (replies) => () => {\n            const { currentMessage } = this.props;\n            if (this.props.onQuickReply) {\n                this.props.onQuickReply(replies.map((reply) => ({\n                    ...reply,\n                    messageId: currentMessage._id,\n                })));\n            }\n        };\n        this.shouldComponentDisplay = () => {\n            const { currentMessage, nextMessage } = this.props;\n            const hasReplies = !!currentMessage && !!currentMessage.quickReplies;\n            const hasNext = !!nextMessage && !!nextMessage._id;\n            const keepIt = currentMessage.quickReplies.keepIt;\n            if (hasReplies && !hasNext) {\n                return true;\n            }\n            if (hasReplies && hasNext && keepIt) {\n                return true;\n            }\n            return false;\n        };\n        this.renderQuickReplySend = () => {\n            const { replies } = this.state;\n            const { sendText, renderQuickReplySend: customSend } = this.props;\n            return (<TouchableOpacity style={[styles.quickReply, styles.sendLink]} onPress={this.handleSend(replies)}>\n        {customSend ? (customSend()) : (<Text style={styles.sendLinkText}>{sendText}</Text>)}\n      </TouchableOpacity>);\n        };\n    }\n    render() {\n        const { currentMessage, color, quickReplyStyle } = this.props;\n        const { replies } = this.state;\n        if (!this.shouldComponentDisplay()) {\n            return null;\n        }\n        const { type } = currentMessage.quickReplies;\n        return (<View style={styles.container}>\n        {currentMessage.quickReplies.values.map((reply, index) => {\n            const selected = type === 'checkbox' && replies.find(sameReply(reply));\n            return (<TouchableOpacity onPress={this.handlePress(reply)} style={[\n                styles.quickReply,\n                quickReplyStyle,\n                { borderColor: color },\n                selected && { backgroundColor: color },\n            ]} key={`${reply.value}-${index}`}>\n                <Text numberOfLines={10} ellipsizeMode={'tail'} style={[\n                styles.quickReplyText,\n                { color: selected ? Color.white : color },\n            ]}>\n                  {reply.title}\n                </Text>\n              </TouchableOpacity>);\n        })}\n        {replies.length > 0 && this.renderQuickReplySend()}\n      </View>);\n    }\n}\nQuickReplies.defaultProps = {\n    currentMessage: {\n        quickReplies: [],\n    },\n    onQuickReply: () => { },\n    color: Color.peterRiver,\n    sendText: 'Send',\n    keepReplies: false,\n    renderQuickReplySend: undefined,\n    quickReplyStyle: undefined,\n};\nQuickReplies.propTypes = {\n    currentMessage: PropTypes.object.isRequired,\n    onQuickReply: PropTypes.func,\n    color: PropTypes.string,\n    sendText: PropTypes.string,\n    keepReplies: PropTypes.bool,\n    renderQuickReplySend: PropTypes.func,\n    quickReplyStyle: StylePropType,\n};\n//# sourceMappingURL=QuickReplies.js.map"]},"metadata":{},"sourceType":"module"}