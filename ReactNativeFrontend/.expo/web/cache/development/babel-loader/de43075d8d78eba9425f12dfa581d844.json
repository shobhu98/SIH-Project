{"ast":null,"code":"import { vec2 } from 'gl-matrix';\nvar ZERO_VECTOR = vec2.create();\n\nfunction linePerpendicularToLine(out, vec, middlePoint, weight) {\n  if (weight <= 0 || vec2.equals(vec, ZERO_VECTOR)) {\n    vec2.copy(out[0], middlePoint);\n    vec2.copy(out[1], middlePoint);\n  } else {\n    var perpendicular = vec2.fromValues(vec[1], -vec[0]);\n    vec2.normalize(perpendicular, perpendicular);\n    var haflWeight = weight * 0.5;\n    vec2.scaleAndAdd(out[0], middlePoint, perpendicular, +haflWeight);\n    vec2.scaleAndAdd(out[1], middlePoint, perpendicular, -haflWeight);\n  }\n\n  return out;\n}\n\nexport function lineCreate() {\n  return [vec2.create(), vec2.create()];\n}\nexport function lineAverage(out, lineA, lineB) {\n  vec2.scale(out[0], vec2.add(out[0], lineA[0], lineB[0]), 0.5);\n  vec2.scale(out[1], vec2.add(out[1], lineA[1], lineB[1]), 0.5);\n  return out;\n}\nexport function linesPerpendicularToLine(pointA, pointB) {\n  var lineVec = vec2.subtract(vec2.create(), pointB.point, pointA.point);\n  return {\n    first: linePerpendicularToLine(lineCreate(), lineVec, pointA.point, pointA.weight),\n    second: linePerpendicularToLine(lineCreate(), lineVec, pointB.point, pointB.weight)\n  };\n}","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-pixi/lib/core/signature/Perpendicular.js"],"names":["vec2","ZERO_VECTOR","create","linePerpendicularToLine","out","vec","middlePoint","weight","equals","copy","perpendicular","fromValues","normalize","haflWeight","scaleAndAdd","lineCreate","lineAverage","lineA","lineB","scale","add","linesPerpendicularToLine","pointA","pointB","lineVec","subtract","point","first","second"],"mappings":"AAAA,SAASA,IAAT,QAAqB,WAArB;AAEA,IAAMC,WAAW,GAAGD,IAAI,CAACE,MAAL,EAApB;;AAEA,SAASC,uBAAT,CAAiCC,GAAjC,EAAsCC,GAAtC,EAA2CC,WAA3C,EAAwDC,MAAxD,EAAgE;AAC9D,MAAIA,MAAM,IAAI,CAAV,IAAeP,IAAI,CAACQ,MAAL,CAAYH,GAAZ,EAAiBJ,WAAjB,CAAnB,EAAkD;AAChDD,IAAAA,IAAI,CAACS,IAAL,CAAUL,GAAG,CAAC,CAAD,CAAb,EAAkBE,WAAlB;AACAN,IAAAA,IAAI,CAACS,IAAL,CAAUL,GAAG,CAAC,CAAD,CAAb,EAAkBE,WAAlB;AACD,GAHD,MAGO;AACL,QAAMI,aAAa,GAAGV,IAAI,CAACW,UAAL,CAAgBN,GAAG,CAAC,CAAD,CAAnB,EAAwB,CAACA,GAAG,CAAC,CAAD,CAA5B,CAAtB;AACAL,IAAAA,IAAI,CAACY,SAAL,CAAeF,aAAf,EAA8BA,aAA9B;AAEA,QAAMG,UAAU,GAAGN,MAAM,GAAG,GAA5B;AACAP,IAAAA,IAAI,CAACc,WAAL,CAAiBV,GAAG,CAAC,CAAD,CAApB,EAAyBE,WAAzB,EAAsCI,aAAtC,EAAqD,CAACG,UAAtD;AACAb,IAAAA,IAAI,CAACc,WAAL,CAAiBV,GAAG,CAAC,CAAD,CAApB,EAAyBE,WAAzB,EAAsCI,aAAtC,EAAqD,CAACG,UAAtD;AACD;;AACD,SAAOT,GAAP;AACD;;AAED,OAAO,SAASW,UAAT,GAAsB;AAC3B,SAAO,CAACf,IAAI,CAACE,MAAL,EAAD,EAAgBF,IAAI,CAACE,MAAL,EAAhB,CAAP;AACD;AAED,OAAO,SAASc,WAAT,CAAqBZ,GAArB,EAA0Ba,KAA1B,EAAiCC,KAAjC,EAAwC;AAC7ClB,EAAAA,IAAI,CAACmB,KAAL,CAAWf,GAAG,CAAC,CAAD,CAAd,EAAmBJ,IAAI,CAACoB,GAAL,CAAShB,GAAG,CAAC,CAAD,CAAZ,EAAiBa,KAAK,CAAC,CAAD,CAAtB,EAA2BC,KAAK,CAAC,CAAD,CAAhC,CAAnB,EAAyD,GAAzD;AACAlB,EAAAA,IAAI,CAACmB,KAAL,CAAWf,GAAG,CAAC,CAAD,CAAd,EAAmBJ,IAAI,CAACoB,GAAL,CAAShB,GAAG,CAAC,CAAD,CAAZ,EAAiBa,KAAK,CAAC,CAAD,CAAtB,EAA2BC,KAAK,CAAC,CAAD,CAAhC,CAAnB,EAAyD,GAAzD;AACA,SAAOd,GAAP;AACD;AAED,OAAO,SAASiB,wBAAT,CAAkCC,MAAlC,EAA0CC,MAA1C,EAAkD;AACvD,MAAMC,OAAO,GAAGxB,IAAI,CAACyB,QAAL,CAAczB,IAAI,CAACE,MAAL,EAAd,EAA6BqB,MAAM,CAACG,KAApC,EAA2CJ,MAAM,CAACI,KAAlD,CAAhB;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAExB,uBAAuB,CAACY,UAAU,EAAX,EAAeS,OAAf,EAAwBF,MAAM,CAACI,KAA/B,EAAsCJ,MAAM,CAACf,MAA7C,CADzB;AAELqB,IAAAA,MAAM,EAAEzB,uBAAuB,CAACY,UAAU,EAAX,EAAeS,OAAf,EAAwBD,MAAM,CAACG,KAA/B,EAAsCH,MAAM,CAAChB,MAA7C;AAF1B,GAAP;AAID","sourcesContent":["import { vec2 } from 'gl-matrix';\n\nconst ZERO_VECTOR = vec2.create();\n\nfunction linePerpendicularToLine(out, vec, middlePoint, weight) {\n  if (weight <= 0 || vec2.equals(vec, ZERO_VECTOR)) {\n    vec2.copy(out[0], middlePoint);\n    vec2.copy(out[1], middlePoint);\n  } else {\n    const perpendicular = vec2.fromValues(vec[1], -vec[0]);\n    vec2.normalize(perpendicular, perpendicular);\n\n    const haflWeight = weight * 0.5;\n    vec2.scaleAndAdd(out[0], middlePoint, perpendicular, +haflWeight);\n    vec2.scaleAndAdd(out[1], middlePoint, perpendicular, -haflWeight);\n  }\n  return out;\n}\n\nexport function lineCreate() {\n  return [vec2.create(), vec2.create()];\n}\n\nexport function lineAverage(out, lineA, lineB) {\n  vec2.scale(out[0], vec2.add(out[0], lineA[0], lineB[0]), 0.5);\n  vec2.scale(out[1], vec2.add(out[1], lineA[1], lineB[1]), 0.5);\n  return out;\n}\n\nexport function linesPerpendicularToLine(pointA, pointB) {\n  const lineVec = vec2.subtract(vec2.create(), pointB.point, pointA.point);\n\n  return {\n    first: linePerpendicularToLine(lineCreate(), lineVec, pointA.point, pointA.weight),\n    second: linePerpendicularToLine(lineCreate(), lineVec, pointB.point, pointB.weight),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}