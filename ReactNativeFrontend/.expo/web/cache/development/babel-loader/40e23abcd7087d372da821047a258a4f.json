{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { lineAverage, lineCreate, linesPerpendicularToLine } from \"./Perpendicular\";\nexport var BezierPath = function () {\n  function BezierPath() {\n    _classCallCheck(this, BezierPath);\n  }\n\n  _createClass(BezierPath, null, [{\n    key: \"dot\",\n    value: function dot(points, graphics) {\n      var _points$ = points[0],\n          point = _points$.point,\n          weight = _points$.weight;\n      graphics.arc(point[0], point[1], weight, 0, Math.PI * 2, true);\n    }\n  }, {\n    key: \"line\",\n    value: function line(points, graphics) {\n      var _linesPerpendicularTo = linesPerpendicularToLine(points[0], points[1]),\n          first = _linesPerpendicularTo.first,\n          second = _linesPerpendicularTo.second;\n\n      graphics.moveTo(first[0][0], first[0][1]);\n      graphics.lineTo(second[0][0], second[0][1]);\n      graphics.lineTo(second[1][0], second[1][1]);\n      graphics.lineTo(first[0][0], first[0][1]);\n      graphics.closePath();\n    }\n  }, {\n    key: \"quadCurve\",\n    value: function quadCurve(points, graphics) {\n      var linesAB = linesPerpendicularToLine(points[0], points[1]);\n      var linesBC = linesPerpendicularToLine(points[1], points[2]);\n      var lineA = linesAB.first;\n      var lineB = lineAverage(lineCreate(), linesAB.second, linesBC.first);\n      var lineC = linesBC.second;\n      graphics.moveTo(lineA[0][0], lineA[0][1]);\n      graphics.quadraticCurveTo(lineB[0][0], lineB[0][1], lineC[0][0], lineC[0][1]);\n      graphics.lineTo(lineC[1][0], lineC[1][1]);\n      graphics.quadraticCurveTo(lineB[1][0], lineB[1][1], lineA[1][0], lineA[1][1]);\n      graphics.closePath();\n    }\n  }, {\n    key: \"bezierCurve\",\n    value: function bezierCurve(points, graphics) {\n      var linesAB = linesPerpendicularToLine(points[0], points[1]);\n      var linesBC = linesPerpendicularToLine(points[1], points[2]);\n      var linesCD = linesPerpendicularToLine(points[2], points[3]);\n      var lineA = linesAB.first;\n      var lineB = lineAverage(lineCreate(), linesAB.second, linesBC.first);\n      var lineC = lineAverage(lineCreate(), linesBC.second, linesCD.first);\n      var lineD = linesCD.second;\n      graphics.moveTo(lineA[0][0], lineA[0][1]);\n      graphics.bezierCurveTo(lineB[0][0], lineB[0][1], lineC[0][0], lineC[0][1], lineD[0][0], lineD[0][1]);\n      graphics.lineTo(lineD[1][0], lineD[1][1]);\n      graphics.bezierCurveTo(lineC[1][0], lineC[1][1], lineB[1][0], lineB[1][1], lineA[1][0], lineA[1][1]);\n      graphics.closePath();\n    }\n  }]);\n\n  return BezierPath;\n}();\nexport default BezierPath;","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-pixi/lib/core/signature/SignatureBezierPath.js"],"names":["lineAverage","lineCreate","linesPerpendicularToLine","BezierPath","points","graphics","point","weight","arc","Math","PI","first","second","moveTo","lineTo","closePath","linesAB","linesBC","lineA","lineB","lineC","quadraticCurveTo","linesCD","lineD","bezierCurveTo"],"mappings":"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","sourcesContent":["//@flow\nimport { lineAverage, lineCreate, linesPerpendicularToLine } from './Perpendicular';\n\ntype DrawDriver = {\n  moveTo: (x: Float, y: Float) => any,\n  lineTo: (x: Float, y: Float) => any,\n  quadraticCurveTo: (cpX: Float, cpY: Float, toX: Float, toY: Float) => any,\n  bezierCurveTo: (cpX: Float, cpY: Float, cpX2: Float, cpY2: Float, toX: Float, toY: Float) => any,\n  arc: (\n    cx: Float,\n    cy: Float,\n    radius: Float,\n    startAngle: Float,\n    endAngle: Float,\n    anticlockwise: Bool\n  ) => any,\n  closePath: () => any,\n};\n\nexport class BezierPath {\n  static dot(points, graphics: DrawDriver) {\n    const { point, weight } = points[0];\n    graphics.arc(point[0], point[1], weight, 0, Math.PI * 2, true);\n  }\n\n  static line(points, graphics: DrawDriver) {\n    const { first, second } = linesPerpendicularToLine(points[0], points[1]);\n    graphics.moveTo(first[0][0], first[0][1]);\n    graphics.lineTo(second[0][0], second[0][1]);\n    graphics.lineTo(second[1][0], second[1][1]);\n    graphics.lineTo(first[0][0], first[0][1]);\n    graphics.closePath();\n  }\n\n  static quadCurve(points, graphics: DrawDriver) {\n    const linesAB = linesPerpendicularToLine(points[0], points[1]);\n    const linesBC = linesPerpendicularToLine(points[1], points[2]);\n\n    const lineA = linesAB.first;\n    const lineB = lineAverage(lineCreate(), linesAB.second, linesBC.first);\n    const lineC = linesBC.second;\n\n    graphics.moveTo(lineA[0][0], lineA[0][1]);\n    graphics.quadraticCurveTo(lineB[0][0], lineB[0][1], lineC[0][0], lineC[0][1]);\n    graphics.lineTo(lineC[1][0], lineC[1][1]);\n    graphics.quadraticCurveTo(lineB[1][0], lineB[1][1], lineA[1][0], lineA[1][1]);\n    graphics.closePath();\n  }\n\n  static bezierCurve(points, graphics: DrawDriver) {\n    const linesAB = linesPerpendicularToLine(points[0], points[1]);\n    const linesBC = linesPerpendicularToLine(points[1], points[2]);\n    const linesCD = linesPerpendicularToLine(points[2], points[3]);\n\n    const lineA = linesAB.first;\n    const lineB = lineAverage(lineCreate(), linesAB.second, linesBC.first);\n    const lineC = lineAverage(lineCreate(), linesBC.second, linesCD.first);\n    const lineD = linesCD.second;\n\n    graphics.moveTo(lineA[0][0], lineA[0][1]);\n    graphics.bezierCurveTo(\n      lineB[0][0],\n      lineB[0][1],\n      lineC[0][0],\n      lineC[0][1],\n      lineD[0][0],\n      lineD[0][1]\n    );\n    graphics.lineTo(lineD[1][0], lineD[1][1]);\n    graphics.bezierCurveTo(\n      lineC[1][0],\n      lineC[1][1],\n      lineB[1][0],\n      lineB[1][1],\n      lineA[1][0],\n      lineA[1][1]\n    );\n    graphics.closePath();\n  }\n}\n\nexport default BezierPath;\n"]},"metadata":{},"sourceType":"module"}