{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nexport var ToggleButtonGroupContext = React.createContext(null);\n\nvar ToggleButtonGroup = function (_React$Component) {\n  _inherits(ToggleButtonGroup, _React$Component);\n\n  var _super = _createSuper(ToggleButtonGroup);\n\n  function ToggleButtonGroup() {\n    _classCallCheck(this, ToggleButtonGroup);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToggleButtonGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          onValueChange = _this$props.onValueChange,\n          children = _this$props.children;\n      return React.createElement(ToggleButtonGroupContext.Provider, {\n        value: {\n          value: value,\n          onValueChange: onValueChange\n        }\n      }, children);\n    }\n  }]);\n\n  return ToggleButtonGroup;\n}(React.Component);\n\n_defineProperty(ToggleButtonGroup, \"displayName\", 'ToggleButton.Group');\n\nexport default ToggleButtonGroup;","map":{"version":3,"sources":["ToggleButtonGroup.tsx"],"names":["ToggleButtonGroupContext","React","ToggleButtonGroup","children","value","onValueChange"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAsBA,OAAO,IAAMA,wBAAwB,GAAGC,KAAK,CAALA,aAAAA,CAAjC,IAAiCA,CAAjC;;IAmCP,iB;;;;;;;;;;;;;6BAGW;AAAA,wBACoC,KAA3C,KADO;AAAA,UACD,KADC,eACD,KADC;AAAA,UACD,aADC,eACD,aADC;AAAA,UACuBE,QADvB,eACuBA,QADvB;AAGP,aACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,KADK,EACLA,KADK;AAELC,UAAAA,aAAAA,EAAAA;AAFK;AADT,OAAA,EADF,QACE,CADF;AAUD;;;;EAhB6BJ,KAAK,CAArC,S;;gBAAMC,iB,iBACiB,oB;;AAkBvB,eAAA,iBAAA","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n};\n\ntype ToggleButtonContextType = {\n  value: string;\n  onValueChange: (item: string) => void;\n};\n\nexport const ToggleButtonGroupContext = React.createContext<\n  ToggleButtonContextType\n>(null as any);\n\n/**\n * Toggle group allows to control a group of toggle buttons.</br>\n * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, checkout <a href=\"/toggle-button-row.html\">`ToggleButton.Row`</a>.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-group.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Group\n *       onValueChange={value => setValue(value)}\n *       value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nclass ToggleButtonGroup extends React.Component<Props> {\n  static displayName = 'ToggleButton.Group';\n\n  render() {\n    const { value, onValueChange, children } = this.props;\n\n    return (\n      <ToggleButtonGroupContext.Provider\n        value={{\n          value,\n          onValueChange,\n        }}\n      >\n        {children}\n      </ToggleButtonGroupContext.Provider>\n    );\n  }\n}\n\nexport default ToggleButtonGroup;\n"]},"metadata":{},"sourceType":"module"}