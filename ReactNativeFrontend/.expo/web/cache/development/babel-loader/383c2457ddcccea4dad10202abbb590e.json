{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport AppbarContent from \"./AppbarContent\";\nimport AppbarAction from \"./AppbarAction\";\nimport AppbarBackAction from \"./AppbarBackAction\";\nimport AppbarHeader from \"./AppbarHeader\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/colors\";\nimport overlay from \"../../styles/overlay\";\nexport var DEFAULT_APPBAR_HEIGHT = 56;\n\nvar Appbar = function (_React$Component) {\n  _inherits(Appbar, _React$Component);\n\n  var _super = _createSuper(Appbar);\n\n  function Appbar() {\n    _classCallCheck(this, Appbar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Appbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          dark = _this$props.dark,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"dark\", \"style\", \"theme\"]);\n\n      var colors = theme.colors,\n          isDarkTheme = theme.dark,\n          mode = theme.mode;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          customBackground = _ref.backgroundColor,\n          _ref$elevation = _ref.elevation,\n          elevation = _ref$elevation === void 0 ? 4 : _ref$elevation,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\", \"elevation\"]);\n\n      var isDark;\n      var backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n      }\n\n      var shouldCenterContent = false;\n      var shouldAddLeftSpacing = false;\n      var shouldAddRightSpacing = false;\n\n      if (Platform.OS === 'ios') {\n        var hasAppbarContent = false;\n        var leftItemsCount = 0;\n        var rightItemsCount = 0;\n        React.Children.forEach(children, function (child) {\n          if (React.isValidElement(child)) {\n            if (child.type === AppbarContent) {\n              hasAppbarContent = true;\n            } else if (hasAppbarContent) {\n              rightItemsCount++;\n            } else {\n              leftItemsCount++;\n            }\n          }\n        });\n        shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n        shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n        shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n      }\n\n      return React.createElement(Surface, _extends({\n        style: [{\n          backgroundColor: backgroundColor\n        }, styles.appbar, {\n          elevation: elevation\n        }, restStyle]\n      }, rest), shouldAddLeftSpacing ? React.createElement(View, {\n        style: styles.spacing\n      }) : null, React.Children.toArray(children).filter(function (child) {\n        return child != null && typeof child !== 'boolean';\n      }).map(function (child, i) {\n        if (!React.isValidElement(child) || ![AppbarContent, AppbarAction, AppbarBackAction].includes(child.type)) {\n          return child;\n        }\n\n        var props = {\n          color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? white : black\n        };\n\n        if (child.type === AppbarContent) {\n          props.style = [i !== 0 && {\n            marginLeft: 8\n          }, shouldCenterContent && {\n            alignItems: 'center'\n          }, child.props.style];\n        }\n\n        return React.cloneElement(child, props);\n      }), shouldAddRightSpacing ? React.createElement(View, {\n        style: styles.spacing\n      }) : null);\n    }\n  }]);\n\n  return Appbar;\n}(React.Component);\n\n_defineProperty(Appbar, \"Content\", AppbarContent);\n\n_defineProperty(Appbar, \"Action\", AppbarAction);\n\n_defineProperty(Appbar, \"BackAction\", AppbarBackAction);\n\n_defineProperty(Appbar, \"Header\", AppbarHeader);\n\nvar styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4\n  },\n  spacing: {\n    width: 48\n  }\n});\nexport default withTheme(Appbar);","map":{"version":3,"sources":["Appbar.tsx"],"names":["DEFAULT_APPBAR_HEIGHT","Appbar","React","AppbarContent","AppbarAction","AppbarBackAction","AppbarHeader","theme","dark","mode","backgroundColor","elevation","StyleSheet","customBackground","isDarkTheme","overlay","colors","isDark","color","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","hasAppbarContent","leftItemsCount","rightItemsCount","child","styles","spacing","props","black","i","marginLeft","alignItems","appbar","height","flexDirection","paddingHorizontal","width","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  AppbarContent as _AppbarContent,\n} from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport AppbarHeader, { AppbarHeader as _AppbarHeader } from './AppbarHeader';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\n\ntype Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nclass Appbar extends React.Component<Props> {\n  // @component ./AppbarContent.tsx\n  static Content = AppbarContent;\n  // @component ./AppbarAction.tsx\n  static Action = AppbarAction;\n  // @component ./AppbarBackAction.tsx\n  static BackAction = AppbarBackAction;\n  // @component ./AppbarHeader.tsx\n  static Header = AppbarHeader;\n\n  render() {\n    const { children, dark, style, theme, ...rest } = this.props;\n\n    const { colors, dark: isDarkTheme, mode } = theme;\n    const {\n      backgroundColor: customBackground,\n      elevation = 4,\n      ...restStyle\n    }: ViewStyle = StyleSheet.flatten(style) || {};\n\n    let isDark: boolean;\n\n    const backgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    let shouldCenterContent = false;\n    let shouldAddLeftSpacing = false;\n    let shouldAddRightSpacing = false;\n    if (Platform.OS === 'ios') {\n      let hasAppbarContent = false;\n      let leftItemsCount = 0;\n      let rightItemsCount = 0;\n\n      React.Children.forEach(children, (child) => {\n        if (React.isValidElement(child)) {\n          if (child.type === AppbarContent) {\n            hasAppbarContent = true;\n          } else if (hasAppbarContent) {\n            rightItemsCount++;\n          } else {\n            leftItemsCount++;\n          }\n        }\n      });\n\n      shouldCenterContent =\n        hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n      shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n      shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n    }\n    return (\n      <Surface\n        //@ts-ignore\n        style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n        {...rest}\n      >\n        {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n        {React.Children.toArray(children)\n          .filter((child) => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              !React.isValidElement(child) ||\n              ![\n                AppbarContent,\n                AppbarAction,\n                AppbarBackAction,\n                // @ts-ignore\n              ].includes(child.type)\n            ) {\n              return child;\n            }\n\n            const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n              color:\n                typeof child.props.color !== 'undefined'\n                  ? child.props.color\n                  : isDark\n                  ? white\n                  : black,\n            };\n\n            if (child.type === AppbarContent) {\n              props.style = [\n                // Since content is not first item, add extra left margin\n                i !== 0 && { marginLeft: 8 },\n                shouldCenterContent && { alignItems: 'center' },\n                child.props.style,\n              ];\n            }\n            return React.cloneElement(child, props);\n          })}\n        {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n"]},"metadata":{},"sourceType":"module"}