{"ast":null,"code":"import { useLayoutEffect, useRef } from 'react';\nexport function useUpdateLayoutEffect(effect) {\n  var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var isInitialMount = useRef(true);\n  useLayoutEffect(function () {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n  }, dependencies);\n}","map":{"version":3,"sources":["../../src/hooks/useUpdateLayoutEffect.ts"],"names":[],"mappings":"AAAA,SAAS,eAAT,EAA0B,MAA1B,QAAwC,OAAxC;AAQA,OAAM,SAAU,qBAAV,CACJ,MADI,EAEoB;AAAA,MAAxB,YAAwB,uEAAF,EAAE;AAExB,MAAM,cAAc,GAAG,MAAM,CAAC,IAAD,CAA7B;AAEA,EAAA,eAAe,CAAC,YAAK;AACnB,QAAI,cAAc,CAAC,OAAnB,EAA4B;AAC1B,MAAA,cAAc,CAAC,OAAf,GAAyB,KAAzB;AACD,KAFD,MAEO;AACL,MAAA,MAAM;AACP;AACF,GANc,EAMZ,YANY,CAAf;AAOD","sourceRoot":"","sourcesContent":["import { useLayoutEffect, useRef } from 'react';\n/**\n * A custom useEffect hook that only triggers on updates, not on initial mount\n * Idea stolen from: https://stackoverflow.com/a/55075818/1526448\n * @param {()=>void} effect the function to call\n * @param {Array<any>} dependencies the state(s) that fires the update\n */\nexport function useUpdateLayoutEffect(effect, dependencies = []) {\n    const isInitialMount = useRef(true);\n    useLayoutEffect(() => {\n        if (isInitialMount.current) {\n            isInitialMount.current = false;\n        }\n        else {\n            effect();\n        }\n    }, dependencies);\n}\n//# sourceMappingURL=useUpdateLayoutEffect.js.map"]},"metadata":{},"sourceType":"module"}