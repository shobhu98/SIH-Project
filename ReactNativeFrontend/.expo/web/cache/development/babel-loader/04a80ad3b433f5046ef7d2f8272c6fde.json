{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nexport var userMediaRequested = false;\nexport var mountedInstances = [];\n\nfunction requestLegacyUserMediaAsync(props) {\n  var optionalSource, constraintToSourceId, sources, audioSource, videoSource, audioSourceId, videoSourceId;\n  return _regeneratorRuntime.async(function requestLegacyUserMediaAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          optionalSource = function optionalSource(id) {\n            return {\n              optional: [{\n                sourceId: id\n              }]\n            };\n          };\n\n          constraintToSourceId = function constraintToSourceId(constraint) {\n            var deviceId = constraint.deviceId;\n\n            if (typeof deviceId === 'string') {\n              return deviceId;\n            }\n\n            if (Array.isArray(deviceId) && deviceId.length > 0) {\n              return deviceId[0];\n            }\n\n            if (typeof deviceId === 'object' && deviceId.ideal) {\n              return deviceId.ideal;\n            }\n\n            return null;\n          };\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n            return MediaStreamTrack.getSources(function (sources) {\n              return resolve(sources);\n            });\n          }));\n\n        case 4:\n          sources = _context.sent;\n          audioSource = null;\n          videoSource = null;\n          sources.forEach(function (source) {\n            if (source.kind === 'audio') {\n              audioSource = source.id;\n            } else if (source.kind === 'video') {\n              videoSource = source.id;\n            }\n          });\n          audioSourceId = constraintToSourceId(props.audioConstraints);\n\n          if (audioSourceId) {\n            audioSource = audioSourceId;\n          }\n\n          videoSourceId = constraintToSourceId(props.videoConstraints);\n\n          if (videoSourceId) {\n            videoSource = videoSourceId;\n          }\n\n          return _context.abrupt(\"return\", [optionalSource(audioSource), optionalSource(videoSource)]);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction sourceSelectedAsync(isMuted, audioConstraints, videoConstraints) {\n  var constraints;\n  return _regeneratorRuntime.async(function sourceSelectedAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          constraints = {\n            video: typeof videoConstraints !== 'undefined' ? videoConstraints : true\n          };\n\n          if (!isMuted) {\n            constraints.audio = typeof audioConstraints !== 'undefined' ? audioConstraints : true;\n          }\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(getAnyUserMediaAsync(constraints));\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function requestUserMediaAsync(props) {\n  var isMuted,\n      _await$requestLegacyU,\n      _await$requestLegacyU2,\n      audio,\n      video,\n      _args3 = arguments;\n\n  return _regeneratorRuntime.async(function requestUserMediaAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          isMuted = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : true;\n\n          if (!canGetUserMedia()) {\n            _context3.next = 5;\n            break;\n          }\n\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(sourceSelectedAsync(isMuted, props.audio, props.video));\n\n        case 4:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 5:\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(requestLegacyUserMediaAsync(props));\n\n        case 7:\n          _await$requestLegacyU = _context3.sent;\n          _await$requestLegacyU2 = _slicedToArray(_await$requestLegacyU, 2);\n          audio = _await$requestLegacyU2[0];\n          video = _await$requestLegacyU2[1];\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(sourceSelectedAsync(isMuted, audio, video));\n\n        case 13:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getAnyUserMediaAsync(constraints) {\n  var ignoreConstraints,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function getAnyUserMediaAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          ignoreConstraints = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(getUserMediaAsync(_objectSpread(_objectSpread({}, constraints), {}, {\n            video: ignoreConstraints || constraints.video\n          })));\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](1);\n\n          if (!(!ignoreConstraints && _context4.t0.name === 'ConstraintNotSatisfiedError')) {\n            _context4.next = 13;\n            break;\n          }\n\n          _context4.next = 12;\n          return _regeneratorRuntime.awrap(getAnyUserMediaAsync(constraints, true));\n\n        case 12:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 13:\n          throw _context4.t0;\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n}\nexport function getUserMediaAsync(constraints) {\n  var _getUserMedia;\n\n  return _regeneratorRuntime.async(function getUserMediaAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {\n            _context5.next = 2;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", navigator.mediaDevices.getUserMedia(constraints));\n\n        case 2:\n          _getUserMedia = navigator['mozGetUserMedia'] || navigator['webkitGetUserMedia'] || navigator['msGetUserMedia'];\n          return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n            return _getUserMedia.call(navigator, constraints, resolve, reject);\n          }));\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function canGetUserMedia() {\n  return canUseDOM && !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia || navigator['mozGetUserMedia'] || navigator['webkitGetUserMedia'] || navigator['msGetUserMedia']);\n}\nexport function isFrontCameraAvailableAsync(devices) {\n  return _regeneratorRuntime.async(function isFrontCameraAvailableAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(supportsCameraType(['front', 'user', 'facetime'], 'user', devices));\n\n        case 2:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isBackCameraAvailableAsync(devices) {\n  return _regeneratorRuntime.async(function isBackCameraAvailableAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(supportsCameraType(['back', 'rear'], 'environment', devices));\n\n        case 2:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction supportsCameraType(labels, type, devices) {\n  var cameras, _cameras$filter, _cameras$filter2, hasCamera, _cameras$filter3, _cameras$filter4, isCapable;\n\n  return _regeneratorRuntime.async(function supportsCameraType$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (devices) {\n            _context8.next = 6;\n            break;\n          }\n\n          if (navigator.mediaDevices.enumerateDevices) {\n            _context8.next = 3;\n            break;\n          }\n\n          return _context8.abrupt(\"return\", null);\n\n        case 3:\n          _context8.next = 5;\n          return _regeneratorRuntime.awrap(navigator.mediaDevices.enumerateDevices());\n\n        case 5:\n          devices = _context8.sent;\n\n        case 6:\n          cameras = devices.filter(function (t) {\n            return t.kind === 'videoinput';\n          });\n          _cameras$filter = cameras.filter(function (camera) {\n            return labels.some(function (label) {\n              return camera.label.toLowerCase().includes(label);\n            });\n          }), _cameras$filter2 = _slicedToArray(_cameras$filter, 1), hasCamera = _cameras$filter2[0];\n          _cameras$filter3 = cameras.filter(function (camera) {\n            if (!('getCapabilities' in camera)) {\n              return null;\n            }\n\n            var capabilities = camera.getCapabilities();\n\n            if (!capabilities.facingMode) {\n              return null;\n            }\n\n            return capabilities.facingMode.find(function (_) {\n              return type;\n            });\n          }), _cameras$filter4 = _slicedToArray(_cameras$filter3, 1), isCapable = _cameras$filter4[0];\n          return _context8.abrupt(\"return\", (isCapable == null ? void 0 : isCapable.deviceId) || (hasCamera == null ? void 0 : hasCamera.deviceId) || null);\n\n        case 10:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/CameraModule/UserMediaManager.ts"],"names":[],"mappings":";;;;;;;;AACA,SAAS,SAAT,QAA0B,+BAA1B;AAEA,OAAO,IAAM,kBAAkB,GAAY,KAApC;AACP,OAAO,IAAM,gBAAgB,GAAU,EAAhC;;AAEP,SAAe,2BAAf,CAA2C,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,UAAA,cADR,GACyB,SAAjB,cAAiB,CAAA,EAAE;AAAA,mBAAK;AAAE,cAAA,QAAQ,EAAE,CAAC;AAAE,gBAAA,QAAQ,EAAE;AAAZ,eAAD;AAAZ,aAAL;AAAA,WAD3B;;AAGQ,UAAA,oBAHR,GAG+B,SAAvB,oBAAuB,CAAA,UAAU,EAAG;AAAA,gBAChC,QADgC,GACnB,UADmB,CAChC,QADgC;;AAGxC,gBAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AAChC,qBAAO,QAAP;AACD;;AAED,gBAAI,KAAK,CAAC,OAAN,CAAc,QAAd,KAA2B,QAAQ,CAAC,MAAT,GAAkB,CAAjD,EAAoD;AAClD,qBAAO,QAAQ,CAAC,CAAD,CAAf;AACD;;AAED,gBAAI,OAAO,QAAP,KAAoB,QAApB,IAAgC,QAAQ,CAAC,KAA7C,EAAoD;AAClD,qBAAO,QAAQ,CAAC,KAAhB;AACD;;AAED,mBAAO,IAAP;AACD,WAnBH;;AAAA;AAAA,2CAqB+B,IAAI,OAAJ,CAAY,UAAA,OAAO;AAAA,mBAE9C,gBAAgB,CAAC,UAAjB,CAA4B,UAAA,OAAO;AAAA,qBAAI,OAAO,CAAC,OAAD,CAAX;AAAA,aAAnC,CAF8C;AAAA,WAAnB,CArB/B;;AAAA;AAqBQ,UAAA,OArBR;AA0BM,UAAA,WA1BN,GA0BoB,IA1BpB;AA2BM,UAAA,WA3BN,GA2BoB,IA3BpB;AA6BE,UAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,MAAM,EAAG;AACvB,gBAAI,MAAM,CAAC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,cAAA,WAAW,GAAG,MAAM,CAAC,EAArB;AACD,aAFD,MAEO,IAAI,MAAM,CAAC,IAAP,KAAgB,OAApB,EAA6B;AAClC,cAAA,WAAW,GAAG,MAAM,CAAC,EAArB;AACD;AACF,WAND;AAQM,UAAA,aArCR,GAqCwB,oBAAoB,CAAC,KAAK,CAAC,gBAAP,CArC5C;;AAsCE,cAAI,aAAJ,EAAmB;AACjB,YAAA,WAAW,GAAG,aAAd;AACD;;AAEK,UAAA,aA1CR,GA0CwB,oBAAoB,CAAC,KAAK,CAAC,gBAAP,CA1C5C;;AA2CE,cAAI,aAAJ,EAAmB;AACjB,YAAA,WAAW,GAAG,aAAd;AACD;;AA7CH,2CA+CS,CAAC,cAAc,CAAC,WAAD,CAAf,EAA8B,cAAc,CAAC,WAAD,CAA5C,CA/CT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkDA,SAAe,mBAAf,CACE,OADF,EAEE,gBAFF,EAGE,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAKQ,UAAA,WALR,GAK8C;AAC1C,YAAA,KAAK,EAAE,OAAO,gBAAP,KAA4B,WAA5B,GAA0C,gBAA1C,GAA6D;AAD1B,WAL9C;;AASE,cAAI,CAAC,OAAL,EAAc;AACZ,YAAA,WAAW,CAAC,KAAZ,GAAoB,OAAO,gBAAP,KAA4B,WAA5B,GAA0C,gBAA1C,GAA6D,IAAjF;AACD;;AAXH;AAAA,2CAae,oBAAoB,CAAC,WAAD,CAbnC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,OAAO,SAAe,qBAAf,CACL,KADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEL,UAAA,OAFK,8DAEc,IAFd;;AAAA,eAID,eAAe,EAJd;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAKU,mBAAmB,CAAC,OAAD,EAAU,KAAK,CAAC,KAAhB,EAAuB,KAAK,CAAC,KAA7B,CAL7B;;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAOwB,2BAA2B,CAAC,KAAD,CAPnD;;AAAA;AAAA;AAAA;AAOE,UAAA,KAPF;AAOS,UAAA,KAPT;AAAA;AAAA,2CAQQ,mBAAmB,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAR3B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAe,oBAAf,CACL,WADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEL,UAAA,iBAFK,8DAEwB,KAFxB;AAAA;AAAA;AAAA,2CAKU,iBAAiB,iCACzB,WADyB;AAE5B,YAAA,KAAK,EAAE,iBAAiB,IAAI,WAAW,CAAC;AAFZ,aAL3B;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,gBAUC,CAAC,iBAAD,IAAsB,aAAM,IAAN,KAAe,6BAVtC;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAWY,oBAAoB,CAAC,WAAD,EAAc,IAAd,CAXhC;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBP,OAAO,SAAe,iBAAf,CAAiC,WAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACD,SAAS,CAAC,YAAV,IAA0B,SAAS,CAAC,YAAV,CAAuB,YADhD;AAAA;AAAA;AAAA;;AAAA,4CAEI,SAAS,CAAC,YAAV,CAAuB,YAAvB,CAAoC,WAApC,CAFJ;;AAAA;AAKC,UAAA,aALD,GAMH,SAAS,CAAC,iBAAD,CAAT,IAAgC,SAAS,CAAC,oBAAD,CAAzC,IAAmE,SAAS,CAAC,gBAAD,CANzE;AAAA,4CAOE,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV;AAAA,mBACjB,aAAa,CAAC,IAAd,CAAmB,SAAnB,EAA8B,WAA9B,EAA2C,OAA3C,EAAoD,MAApD,CADiB;AAAA,WAAZ,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP,OAAM,SAAU,eAAV,GAAyB;AAC7B,SAEE,SAAS,IAET,CAAC,EACE,SAAS,CAAC,YAAV,IAA0B,SAAS,CAAC,YAAV,CAAuB,YAAlD,IACA,SAAS,CAAC,iBAAD,CADT,IAEA,SAAS,CAAC,oBAAD,CAFT,IAGA,SAAS,CAAC,gBAAD,CAJV,CAJH;AAWD;AAED,OAAO,SAAe,2BAAf,CACL,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAGQ,kBAAkB,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB,UAAlB,CAAD,EAAgC,MAAhC,EAAwC,OAAxC,CAH1B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMP,OAAO,SAAe,0BAAf,CACL,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAGQ,kBAAkB,CAAC,CAAC,MAAD,EAAS,MAAT,CAAD,EAAmB,aAAnB,EAAkC,OAAlC,CAH1B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMP,SAAe,kBAAf,CACE,MADF,EAEE,IAFF,EAGE,OAHF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,cAKO,OALP;AAAA;AAAA;AAAA;;AAAA,cAMS,SAAS,CAAC,YAAV,CAAuB,gBANhC;AAAA;AAAA;AAAA;;AAAA,4CAOa,IAPb;;AAAA;AAAA;AAAA,2CASoB,SAAS,CAAC,YAAV,CAAuB,gBAAvB,EATpB;;AAAA;AASI,UAAA,OATJ;;AAAA;AAWQ,UAAA,OAXR,GAWkB,OAAO,CAAC,MAAR,CAAe,UAAA,CAAC;AAAA,mBAAI,CAAC,CAAC,IAAF,KAAW,YAAf;AAAA,WAAhB,CAXlB;AAAA,4BAYsB,OAAO,CAAC,MAAR,CAAe,UAAA,MAAM;AAAA,mBACvC,MAAM,CAAC,IAAP,CAAY,UAAA,KAAK;AAAA,qBAAI,MAAM,CAAC,KAAP,CAAa,WAAb,GAA2B,QAA3B,CAAoC,KAApC,CAAJ;AAAA,aAAjB,CADuC;AAAA,WAArB,CAZtB,yDAYS,SAZT;AAAA,6BAesB,OAAO,CAAC,MAAR,CAAe,UAAA,MAAM,EAAG;AAC1C,gBAAI,EAAE,qBAAqB,MAAvB,CAAJ,EAAoC;AAClC,qBAAO,IAAP;AACD;;AAED,gBAAM,YAAY,GAAI,MAAc,CAAC,eAAf,EAAtB;;AACA,gBAAI,CAAC,YAAY,CAAC,UAAlB,EAA8B;AAC5B,qBAAO,IAAP;AACD;;AAED,mBAAO,YAAY,CAAC,UAAb,CAAwB,IAAxB,CAA6B,UAAC,CAAD;AAAA,qBAAe,IAAf;AAAA,aAA7B,CAAP;AACD,WAXmB,CAftB,0DAeS,SAfT;AAAA,4CA4BS,CAAA,SAAS,QAAT,YAAA,SAAS,CAAE,QAAX,MAAuB,SAAvB,oBAAuB,SAAS,CAAE,QAAlC,KAA8C,IA5BvD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* eslint-env browser */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nexport const userMediaRequested: boolean = false;\nexport const mountedInstances: any[] = [];\n\nasync function requestLegacyUserMediaAsync(props): Promise<any[]> {\n  const optionalSource = id => ({ optional: [{ sourceId: id }] });\n\n  const constraintToSourceId = constraint => {\n    const { deviceId } = constraint;\n\n    if (typeof deviceId === 'string') {\n      return deviceId;\n    }\n\n    if (Array.isArray(deviceId) && deviceId.length > 0) {\n      return deviceId[0];\n    }\n\n    if (typeof deviceId === 'object' && deviceId.ideal) {\n      return deviceId.ideal;\n    }\n\n    return null;\n  };\n\n  const sources: any[] = await new Promise(resolve =>\n    // @ts-ignore: https://caniuse.com/#search=getSources Chrome for Android (78) & Samsung Internet (10.1) use this\n    MediaStreamTrack.getSources(sources => resolve(sources))\n  );\n\n  let audioSource = null;\n  let videoSource = null;\n\n  sources.forEach(source => {\n    if (source.kind === 'audio') {\n      audioSource = source.id;\n    } else if (source.kind === 'video') {\n      videoSource = source.id;\n    }\n  });\n\n  const audioSourceId = constraintToSourceId(props.audioConstraints);\n  if (audioSourceId) {\n    audioSource = audioSourceId;\n  }\n\n  const videoSourceId = constraintToSourceId(props.videoConstraints);\n  if (videoSourceId) {\n    videoSource = videoSourceId;\n  }\n\n  return [optionalSource(audioSource), optionalSource(videoSource)];\n}\n\nasync function sourceSelectedAsync(\n  isMuted: boolean,\n  audioConstraints?: MediaTrackConstraints | boolean,\n  videoConstraints?: MediaTrackConstraints | boolean\n): Promise<MediaStream> {\n  const constraints: MediaStreamConstraints = {\n    video: typeof videoConstraints !== 'undefined' ? videoConstraints : true,\n  };\n\n  if (!isMuted) {\n    constraints.audio = typeof audioConstraints !== 'undefined' ? audioConstraints : true;\n  }\n\n  return await getAnyUserMediaAsync(constraints);\n}\n\nexport async function requestUserMediaAsync(\n  props: { audio?: any; video?: any },\n  isMuted: boolean = true\n): Promise<MediaStream> {\n  if (canGetUserMedia()) {\n    return await sourceSelectedAsync(isMuted, props.audio, props.video);\n  }\n  const [audio, video] = await requestLegacyUserMediaAsync(props);\n  return await sourceSelectedAsync(isMuted, audio, video);\n}\n\nexport async function getAnyUserMediaAsync(\n  constraints: MediaStreamConstraints,\n  ignoreConstraints: boolean = false\n): Promise<MediaStream> {\n  try {\n    return await getUserMediaAsync({\n      ...constraints,\n      video: ignoreConstraints || constraints.video,\n    });\n  } catch (error) {\n    if (!ignoreConstraints && error.name === 'ConstraintNotSatisfiedError') {\n      return await getAnyUserMediaAsync(constraints, true);\n    }\n    throw error;\n  }\n}\n\nexport async function getUserMediaAsync(constraints: MediaStreamConstraints): Promise<MediaStream> {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  const _getUserMedia =\n    navigator['mozGetUserMedia'] || navigator['webkitGetUserMedia'] || navigator['msGetUserMedia'];\n  return new Promise((resolve, reject) =>\n    _getUserMedia.call(navigator, constraints, resolve, reject)\n  );\n}\n\nexport function canGetUserMedia(): boolean {\n  return (\n    // SSR\n    canUseDOM &&\n    // Has any form of media API\n    !!(\n      (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ||\n      navigator['mozGetUserMedia'] ||\n      navigator['webkitGetUserMedia'] ||\n      navigator['msGetUserMedia']\n    )\n  );\n}\n\nexport async function isFrontCameraAvailableAsync(\n  devices?: MediaDeviceInfo[]\n): Promise<null | string> {\n  return await supportsCameraType(['front', 'user', 'facetime'], 'user', devices);\n}\n\nexport async function isBackCameraAvailableAsync(\n  devices?: MediaDeviceInfo[]\n): Promise<null | string> {\n  return await supportsCameraType(['back', 'rear'], 'environment', devices);\n}\n\nasync function supportsCameraType(\n  labels: string[],\n  type: string,\n  devices?: MediaDeviceInfo[]\n): Promise<null | string> {\n  if (!devices) {\n    if (!navigator.mediaDevices.enumerateDevices) {\n      return null;\n    }\n    devices = await navigator.mediaDevices.enumerateDevices();\n  }\n  const cameras = devices.filter(t => t.kind === 'videoinput');\n  const [hasCamera] = cameras.filter(camera =>\n    labels.some(label => camera.label.toLowerCase().includes(label))\n  );\n  const [isCapable] = cameras.filter(camera => {\n    if (!('getCapabilities' in camera)) {\n      return null;\n    }\n\n    const capabilities = (camera as any).getCapabilities();\n    if (!capabilities.facingMode) {\n      return null;\n    }\n\n    return capabilities.facingMode.find((_: string) => type);\n  });\n\n  return isCapable?.deviceId || hasCamera?.deviceId || null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}