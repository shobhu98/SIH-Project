{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { CodedError, UnavailabilityError } from '@unimodules/core';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'invariant';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Canvas from \"./Canvas\";\n\nfunction getImageForAsset(asset) {\n  if (asset != null && typeof asset === 'object' && asset !== null && asset.downloadAsync) {\n    var dataURI = asset.localUri || asset.uri || '';\n    var image = new Image();\n    image.src = dataURI;\n    return image;\n  }\n\n  return asset;\n}\n\nfunction isOffscreenCanvas(element) {\n  return element && typeof element.convertToBlob === 'function';\n}\n\nfunction asExpoContext(gl) {\n  gl.endFrameEXP = function glEndFrameEXP() {};\n\n  if (!gl['_expo_texImage2D']) {\n    gl['_expo_texImage2D'] = gl.texImage2D;\n\n    gl.texImage2D = function () {\n      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n        props[_key] = arguments[_key];\n      }\n\n      var nextProps = [].concat(props);\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texImage2D'].apply(gl, _toConsumableArray(nextProps));\n    };\n  }\n\n  if (!gl['_expo_texSubImage2D']) {\n    gl['_expo_texSubImage2D'] = gl.texSubImage2D;\n\n    gl.texSubImage2D = function () {\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n\n      var nextProps = [].concat(props);\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texSubImage2D'].apply(gl, _toConsumableArray(nextProps));\n    };\n  }\n\n  return gl;\n}\n\nfunction ensureContext(canvas, contextAttributes) {\n  if (!canvas) {\n    throw new CodedError('ERR_GL_INVALID', 'Attempting to use the GL context before it has been created.');\n  }\n\n  var isIOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n  var context = !isIOS && canvas.getContext('webgl2', contextAttributes) || canvas.getContext('webgl', contextAttributes) || canvas.getContext('webgl-experimental', contextAttributes) || canvas.getContext('experimental-webgl', contextAttributes);\n  invariant(context, 'Browser does not support WebGL');\n  return asExpoContext(context);\n}\n\nfunction stripNonDOMProps(props) {\n  for (var k in propTypes) {\n    if (k in props) {\n      delete props[k];\n    }\n  }\n\n  return props;\n}\n\nvar propTypes = {\n  onContextCreate: PropTypes.func.isRequired,\n  onContextRestored: PropTypes.func,\n  onContextLost: PropTypes.func,\n  webglContextAttributes: PropTypes.object,\n  msaaSamples: PropTypes.number,\n  nativeRef_EXPERIMENTAL: PropTypes.func\n};\n\nfunction getBlobFromWebGLRenderingContext(gl) {\n  var options,\n      canvas,\n      blob,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getBlobFromWebGLRenderingContext$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          invariant(gl, 'getBlobFromWebGLRenderingContext(): WebGL Rendering Context is not defined');\n          canvas = gl.canvas;\n          blob = null;\n\n          if (!(typeof canvas.msToBlob === 'function')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(canvas.msToBlob());\n\n        case 7:\n          blob = _context.sent;\n          _context.next = 19;\n          break;\n\n        case 10:\n          if (!isOffscreenCanvas(canvas)) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(canvas.convertToBlob({\n            quality: options.compress,\n            type: options.format\n          }));\n\n        case 13:\n          blob = _context.sent;\n          _context.next = 19;\n          break;\n\n        case 16:\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n            canvas.toBlob(function (blob) {\n              return resolve(blob);\n            }, options.format, options.compress);\n          }));\n\n        case 18:\n          blob = _context.sent;\n\n        case 19:\n          return _context.abrupt(\"return\", {\n            blob: blob,\n            width: canvas.width,\n            height: canvas.height\n          });\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar GLView = function () {\n  var GLView = function (_React$Component) {\n    _inherits(GLView, _React$Component);\n\n    var _super = _createSuper(GLView);\n\n    function GLView() {\n      var _this;\n\n      _classCallCheck(this, GLView);\n\n      _this = _super.apply(this, arguments);\n\n      _this.onContextLost = function (event) {\n        if (event && event.preventDefault) {\n          event.preventDefault();\n        }\n\n        _this.gl = undefined;\n\n        if (typeof _this.props.onContextLost === 'function') {\n          _this.props.onContextLost();\n        }\n      };\n\n      _this.onContextRestored = function () {\n        _this.gl = undefined;\n\n        if (_this.getGLContext() == null) {\n          throw new CodedError('ERR_GL_INVALID', 'Failed to restore GL context.');\n        }\n      };\n\n      _this.setCanvasRef = function (canvas) {\n        _this.canvas = canvas;\n\n        if (typeof _this.props.nativeRef_EXPERIMENTAL === 'function') {\n          _this.props.nativeRef_EXPERIMENTAL(canvas);\n        }\n\n        if (_this.canvas) {\n          _this.canvas.addEventListener('webglcontextlost', _this.onContextLost);\n\n          _this.canvas.addEventListener('webglcontextrestored', _this.onContextRestored);\n\n          _this.getGLContext();\n        }\n      };\n\n      return _this;\n    }\n\n    _createClass(GLView, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        if (this.gl) {\n          var loseContextExt = this.gl.getExtension('WEBGL_lose_context');\n\n          if (loseContextExt) {\n            loseContextExt.loseContext();\n          }\n\n          this.gl = undefined;\n        }\n\n        if (this.canvas) {\n          this.canvas.removeEventListener('webglcontextlost', this.onContextLost);\n          this.canvas.removeEventListener('webglcontextrestored', this.onContextRestored);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var domProps = stripNonDOMProps(_objectSpread({}, this.props));\n        delete domProps.ref;\n        return React.createElement(Canvas, _extends({}, domProps, {\n          canvasRef: this.setCanvasRef\n        }));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var webglContextAttributes = this.props.webglContextAttributes;\n\n        if (this.canvas && webglContextAttributes !== prevProps.webglContextAttributes) {\n          this.onContextLost(null);\n          this.onContextRestored();\n        }\n      }\n    }, {\n      key: \"getGLContextOrReject\",\n      value: function getGLContextOrReject() {\n        var gl = this.getGLContext();\n\n        if (!gl) {\n          throw new CodedError('ERR_GL_INVALID', 'Attempting to use the GL context before it has been created.');\n        }\n\n        return gl;\n      }\n    }, {\n      key: \"getGLContext\",\n      value: function getGLContext() {\n        if (this.gl) return this.gl;\n\n        if (this.canvas) {\n          this.gl = ensureContext(this.canvas, this.props.webglContextAttributes);\n\n          if (typeof this.props.onContextCreate === 'function') {\n            this.props.onContextCreate(this.gl);\n          }\n\n          return this.gl;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"takeSnapshotAsync\",\n      value: function takeSnapshotAsync() {\n        var options,\n            gl,\n            _args2 = arguments;\n        return _regeneratorRuntime.async(function takeSnapshotAsync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n                if (GLView.takeSnapshotAsync) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new UnavailabilityError('expo-gl', 'takeSnapshotAsync');\n\n              case 3:\n                gl = this.getGLContextOrReject();\n                _context2.next = 6;\n                return _regeneratorRuntime.awrap(GLView.takeSnapshotAsync(gl, options));\n\n              case 6:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"startARSessionAsync\",\n      value: function startARSessionAsync() {\n        return _regeneratorRuntime.async(function startARSessionAsync$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throw new UnavailabilityError('GLView', 'startARSessionAsync');\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }, {\n      key: \"createCameraTextureAsync\",\n      value: function createCameraTextureAsync() {\n        return _regeneratorRuntime.async(function createCameraTextureAsync$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throw new UnavailabilityError('GLView', 'createCameraTextureAsync');\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }, {\n      key: \"destroyObjectAsync\",\n      value: function destroyObjectAsync(glObject) {\n        return _regeneratorRuntime.async(function destroyObjectAsync$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                throw new UnavailabilityError('GLView', 'destroyObjectAsync');\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }], [{\n      key: \"createContextAsync\",\n      value: function createContextAsync() {\n        var canvas, _Dimensions$get, width, height, scale;\n\n        return _regeneratorRuntime.async(function createContextAsync$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (canUseDOM) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", null);\n\n              case 2:\n                canvas = document.createElement('canvas');\n                _Dimensions$get = Dimensions.get('window'), width = _Dimensions$get.width, height = _Dimensions$get.height, scale = _Dimensions$get.scale;\n                canvas.width = width * scale;\n                canvas.height = height * scale;\n                return _context6.abrupt(\"return\", ensureContext(canvas));\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }, {\n      key: \"destroyContextAsync\",\n      value: function destroyContextAsync(exgl) {\n        return _regeneratorRuntime.async(function destroyContextAsync$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", true);\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }, {\n      key: \"takeSnapshotAsync\",\n      value: function takeSnapshotAsync(gl) {\n        var options,\n            _await$getBlobFromWeb,\n            blob,\n            width,\n            height,\n            _args8 = arguments;\n\n        return _regeneratorRuntime.async(function takeSnapshotAsync$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n                _context8.next = 3;\n                return _regeneratorRuntime.awrap(getBlobFromWebGLRenderingContext(gl, options));\n\n              case 3:\n                _await$getBlobFromWeb = _context8.sent;\n                blob = _await$getBlobFromWeb.blob;\n                width = _await$getBlobFromWeb.width;\n                height = _await$getBlobFromWeb.height;\n\n                if (blob) {\n                  _context8.next = 9;\n                  break;\n                }\n\n                throw new CodedError('ERR_GL_SNAPSHOT', 'Failed to save the GL context');\n\n              case 9:\n                return _context8.abrupt(\"return\", {\n                  uri: blob,\n                  localUri: '',\n                  width: width,\n                  height: height\n                });\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }]);\n\n    return GLView;\n  }(React.Component);\n\n  GLView.propTypes = propTypes;\n  return GLView;\n}();\n\nexport { GLView };","map":{"version":3,"sources":["../src/GLView.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, UnavailabilityError } from '@unimodules/core';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'invariant';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dimensions } from 'react-native';\n\nimport Canvas from './Canvas';\nimport {\n  BaseGLViewProps,\n  ComponentOrHandle,\n  ExpoWebGLRenderingContext,\n  GLSnapshot,\n  SnapshotOptions,\n} from './GLView.types';\n\nfunction getImageForAsset(asset: {\n  downloadAsync: () => Promise<any>;\n  uri?: string;\n  localUri?: string;\n}): HTMLImageElement | any {\n  if (asset != null && typeof asset === 'object' && asset !== null && asset.downloadAsync) {\n    const dataURI = asset.localUri || asset.uri || '';\n    const image = new Image();\n    image.src = dataURI;\n    return image;\n  }\n  return asset;\n}\n\nfunction isOffscreenCanvas(element: any): element is OffscreenCanvas {\n  return element && typeof element.convertToBlob === 'function';\n}\n\nfunction asExpoContext(gl: ExpoWebGLRenderingContext): WebGLRenderingContext {\n  gl.endFrameEXP = function glEndFrameEXP(): void {};\n\n  if (!gl['_expo_texImage2D']) {\n    gl['_expo_texImage2D'] = gl.texImage2D;\n    gl.texImage2D = (...props: any[]): any => {\n      const nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texImage2D'](...nextProps);\n    };\n  }\n\n  if (!gl['_expo_texSubImage2D']) {\n    gl['_expo_texSubImage2D'] = gl.texSubImage2D;\n    gl.texSubImage2D = (...props: any[]): any => {\n      const nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texSubImage2D'](...nextProps);\n    };\n  }\n\n  return gl;\n}\n\nfunction ensureContext(\n  canvas?: HTMLCanvasElement,\n  contextAttributes?: WebGLContextAttributes\n): WebGLRenderingContext {\n  if (!canvas) {\n    throw new CodedError(\n      'ERR_GL_INVALID',\n      'Attempting to use the GL context before it has been created.'\n    );\n  }\n\n  // Apple disables WebGL 2.0 and doesn't provide any way to detect if it's disabled.\n  const isIOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n\n  const context =\n    (!isIOS && canvas.getContext('webgl2', contextAttributes)) ||\n    canvas.getContext('webgl', contextAttributes) ||\n    canvas.getContext('webgl-experimental', contextAttributes) ||\n    canvas.getContext('experimental-webgl', contextAttributes);\n  invariant(context, 'Browser does not support WebGL');\n  return asExpoContext(context as ExpoWebGLRenderingContext);\n}\n\nfunction stripNonDOMProps(props: { [key: string]: any }): { [key: string]: any } {\n  for (const k in propTypes) {\n    if (k in props) {\n      delete props[k];\n    }\n  }\n  return props;\n}\n\nconst propTypes = {\n  onContextCreate: PropTypes.func.isRequired,\n  onContextRestored: PropTypes.func,\n  onContextLost: PropTypes.func,\n  webglContextAttributes: PropTypes.object,\n\n  /**\n   * [iOS only] Number of samples for Apple's built-in multisampling.\n   */\n  msaaSamples: PropTypes.number,\n\n  /**\n   * A ref callback for the native GLView\n   */\n  nativeRef_EXPERIMENTAL: PropTypes.func,\n};\n\nexport interface GLViewProps extends BaseGLViewProps {\n  onContextCreate: (gl: WebGLRenderingContext) => void;\n  onContextRestored?: (gl?: WebGLRenderingContext) => void;\n  onContextLost?: () => void;\n  webglContextAttributes?: WebGLContextAttributes;\n  /**\n   * [iOS only] Number of samples for Apple's built-in multisampling.\n   */\n  msaaSamples: number;\n\n  /**\n   * A ref callback for the native GLView\n   */\n  nativeRef_EXPERIMENTAL?(callback: ComponentOrHandle | HTMLCanvasElement | null);\n}\n\nasync function getBlobFromWebGLRenderingContext(\n  gl: WebGLRenderingContext,\n  options: SnapshotOptions = {}\n): Promise<{ width: number; height: number; blob: Blob | null }> {\n  invariant(gl, 'getBlobFromWebGLRenderingContext(): WebGL Rendering Context is not defined');\n\n  const { canvas } = gl;\n\n  let blob: Blob | null = null;\n\n  if (typeof (canvas as any).msToBlob === 'function') {\n    // @ts-ignore: polyfill: https://stackoverflow.com/a/29815058/4047926\n    blob = await canvas.msToBlob();\n  } else if (isOffscreenCanvas(canvas)) {\n    blob = await canvas.convertToBlob({ quality: options.compress, type: options.format });\n  } else {\n    blob = await new Promise(resolve => {\n      canvas.toBlob((blob: Blob | null) => resolve(blob), options.format, options.compress);\n    });\n  }\n\n  return {\n    blob,\n    width: canvas.width,\n    height: canvas.height,\n  };\n}\n\nexport class GLView extends React.Component<GLViewProps> {\n  static propTypes = propTypes;\n\n  canvas?: HTMLCanvasElement;\n\n  gl?: WebGLRenderingContext;\n\n  static async createContextAsync(): Promise<WebGLRenderingContext | null> {\n    if (!canUseDOM) {\n      return null;\n    }\n    const canvas = document.createElement('canvas');\n    const { width, height, scale } = Dimensions.get('window');\n    canvas.width = width * scale;\n    canvas.height = height * scale;\n    return ensureContext(canvas);\n  }\n\n  static async destroyContextAsync(exgl?: WebGLRenderingContext | number): Promise<boolean> {\n    // Do nothing\n    return true;\n  }\n\n  static async takeSnapshotAsync(\n    gl: WebGLRenderingContext,\n    options: SnapshotOptions = {}\n  ): Promise<GLSnapshot> {\n    const { blob, width, height } = await getBlobFromWebGLRenderingContext(gl, options);\n\n    if (!blob) {\n      throw new CodedError('ERR_GL_SNAPSHOT', 'Failed to save the GL context');\n    }\n\n    return {\n      uri: blob,\n      localUri: '',\n      width,\n      height,\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.gl) {\n      const loseContextExt = this.gl.getExtension('WEBGL_lose_context');\n      if (loseContextExt) {\n        loseContextExt.loseContext();\n      }\n      this.gl = undefined;\n    }\n    if (this.canvas) {\n      this.canvas.removeEventListener('webglcontextlost', this.onContextLost);\n      this.canvas.removeEventListener('webglcontextrestored', this.onContextRestored);\n    }\n  }\n\n  render() {\n    const domProps = stripNonDOMProps({ ...this.props });\n    delete domProps.ref;\n    return <Canvas {...domProps} canvasRef={this.setCanvasRef} />;\n  }\n\n  componentDidUpdate(prevProps: GLViewProps) {\n    const { webglContextAttributes } = this.props;\n    if (this.canvas && webglContextAttributes !== prevProps.webglContextAttributes) {\n      this.onContextLost(null);\n      this.onContextRestored();\n    }\n  }\n\n  private getGLContextOrReject(): WebGLRenderingContext {\n    const gl = this.getGLContext();\n    if (!gl) {\n      throw new CodedError(\n        'ERR_GL_INVALID',\n        'Attempting to use the GL context before it has been created.'\n      );\n    }\n    return gl;\n  }\n\n  private onContextLost = (event: Event | null): void => {\n    if (event && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.gl = undefined;\n\n    if (typeof this.props.onContextLost === 'function') {\n      this.props.onContextLost();\n    }\n  };\n\n  private onContextRestored = (): void => {\n    this.gl = undefined;\n    if (this.getGLContext() == null) {\n      throw new CodedError('ERR_GL_INVALID', 'Failed to restore GL context.');\n    }\n  };\n\n  private getGLContext(): WebGLRenderingContext | null {\n    if (this.gl) return this.gl;\n\n    if (this.canvas) {\n      this.gl = ensureContext(this.canvas, this.props.webglContextAttributes);\n      if (typeof this.props.onContextCreate === 'function') {\n        this.props.onContextCreate(this.gl);\n      }\n      return this.gl;\n    }\n    return null;\n  }\n\n  private setCanvasRef = (canvas: HTMLCanvasElement): void => {\n    this.canvas = canvas;\n\n    if (typeof this.props.nativeRef_EXPERIMENTAL === 'function') {\n      this.props.nativeRef_EXPERIMENTAL(canvas);\n    }\n\n    if (this.canvas) {\n      this.canvas.addEventListener('webglcontextlost', this.onContextLost);\n      this.canvas.addEventListener('webglcontextrestored', this.onContextRestored);\n\n      this.getGLContext();\n    }\n  };\n\n  public async takeSnapshotAsync(options: SnapshotOptions = {}): Promise<GLSnapshot> {\n    if (!GLView.takeSnapshotAsync) {\n      throw new UnavailabilityError('expo-gl', 'takeSnapshotAsync');\n    }\n\n    const gl = this.getGLContextOrReject();\n    return await GLView.takeSnapshotAsync(gl, options);\n  }\n\n  public async startARSessionAsync(): Promise<void> {\n    throw new UnavailabilityError('GLView', 'startARSessionAsync');\n  }\n\n  public async createCameraTextureAsync(): Promise<void> {\n    throw new UnavailabilityError('GLView', 'createCameraTextureAsync');\n  }\n\n  public async destroyObjectAsync(glObject: WebGLObject): Promise<void> {\n    throw new UnavailabilityError('GLView', 'destroyObjectAsync');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}