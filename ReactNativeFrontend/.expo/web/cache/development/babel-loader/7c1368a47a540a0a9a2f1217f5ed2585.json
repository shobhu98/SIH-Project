{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"../Modal\";\nimport DialogContent from \"./DialogContent\";\nimport DialogActions from \"./DialogActions\";\nimport DialogTitle from \"./DialogTitle\";\nimport DialogScrollArea from \"./DialogScrollArea\";\nimport { withTheme } from \"../../core/theming\";\n\nvar Dialog = function (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  var _super = _createSuper(Dialog);\n\n  function Dialog() {\n    _classCallCheck(this, Dialog);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Dialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          dismissable = _this$props.dismissable,\n          onDismiss = _this$props.onDismiss,\n          visible = _this$props.visible,\n          style = _this$props.style,\n          theme = _this$props.theme;\n      return React.createElement(Modal, {\n        dismissable: dismissable,\n        onDismiss: onDismiss,\n        visible: visible,\n        contentContainerStyle: [{\n          borderRadius: theme.roundness,\n          backgroundColor: theme.colors.surface\n        }, styles.container, style]\n      }, React.Children.toArray(children).filter(function (child) {\n        return child != null && typeof child !== 'boolean';\n      }).map(function (child, i) {\n        if (i === 0 && React.isValidElement(child) && child.type === DialogContent) {\n          return React.cloneElement(child, {\n            style: [{\n              paddingTop: 24\n            }, child.props.style]\n          });\n        }\n\n        return child;\n      }));\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\n_defineProperty(Dialog, \"Content\", DialogContent);\n\n_defineProperty(Dialog, \"Actions\", DialogActions);\n\n_defineProperty(Dialog, \"Title\", DialogTitle);\n\n_defineProperty(Dialog, \"ScrollArea\", DialogScrollArea);\n\n_defineProperty(Dialog, \"defaultProps\", {\n  dismissable: true,\n  visible: false\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24,\n    justifyContent: 'flex-start'\n  }\n});\nexport default withTheme(Dialog);","map":{"version":3,"sources":["Dialog.tsx"],"names":["Dialog","React","DialogContent","DialogActions","DialogTitle","DialogScrollArea","dismissable","visible","theme","borderRadius","backgroundColor","surface","styles","child","i","style","paddingTop","container","marginVertical","Platform","marginHorizontal","elevation","justifyContent","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,KAAA;AACA,OAAA,aAAA;AACA,OAAA,aAAA;AAEA,OAAA,WAAA;AACA,OAAA,gBAAA;AACA,SAAA,SAAA;;IAqEA,M;;;;;;;;;;;;;6BAeW;AAAA,wBAQH,KAPJ,KADO;AAAA,UACD,QADC,eACD,QADC;AAAA,UACD,WADC,eACD,WADC;AAAA,UACD,SADC,eACD,SADC;AAAA,UACD,OADC,eACD,OADC;AAAA,UACD,KADC,eACD,KADC;AAAA,UAOLQ,KAPK,eAOLA,KAPK;AAUP,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,QAAA,WAAW,EADb,WAAA;AAEE,QAAA,SAAS,EAFX,SAAA;AAGE,QAAA,OAAO,EAHT,OAAA;AAIE,QAAA,qBAAqB,EAAE,CACrB;AACEC,UAAAA,YAAY,EAAED,KAAK,CADrB,SAAA;AAEEE,UAAAA,eAAe,EAAEF,KAAK,CAALA,MAAAA,CAAaG;AAFhC,SADqB,EAKrBC,MAAM,CALe,SAAA,EAAA,KAAA;AAJzB,OAAA,EAaG,KAAK,CAAL,QAAA,CAAA,OAAA,CAAA,QAAA,EAAA,MAAA,CACUC,UAAAA,KAAD;AAAA,eAAWA,KAAK,IAALA,IAAAA,IAAiB,OAAA,KAAA,KADrC,SACS;AAAA,OADT,EAAA,GAAA,CAEM,UAAA,KAAA,EAAA,CAAA,EAAc;AACjB,YACEC,CAAC,KAADA,CAAAA,IACAb,KAAK,CAALA,cAAAA,CADAa,KACAb,CADAa,IAEAD,KAAK,CAALA,IAAAA,KAHF,aAAA,EAIE;AAEA,iBAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAC/BE,YAAAA,KAAK,EAAE,CAAC;AAAEC,cAAAA,UAAU,EAAE;AAAd,aAAD,EAAqBH,KAAK,CAALA,KAAAA,CAArB,KAAA;AADwB,WAA1B,CAAP;AAGD;;AAED,eAAA,KAAA;AA5BR,OAcK,CAbH,CADF;AAgCD;;;;EAzDkBZ,KAAK,CAA1B,S;;gBAAMD,M,aAEaE,a;;gBAFbF,M,aAIaG,a;;gBAJbH,M,WAMWI,W;;gBANXJ,M,gBAQgBK,gB;;gBARhBL,M,kBAUkB;AACpBM,EAAAA,WAAW,EADS,IAAA;AAEpBC,EAAAA,OAAO,EAAE;AAFW,C;;AAkDxB,IAAMK,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BK,EAAAA,SAAS,EAAE;AAQTC,IAAAA,cAAc,EAAEC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,GAAAA,EAAAA,GARP,CAAA;AASTC,IAAAA,gBAAgB,EATP,EAAA;AAUTC,IAAAA,SAAS,EAVA,EAAA;AAWTC,IAAAA,cAAc,EAAE;AAXP;AADoB,CAAlB,CAAf;AAgBA,eAAeC,SAAS,CAAxB,MAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <View>\n *       <Button onPress={showDialog}>Show Dialog</Button>\n *       <Portal>\n *         <Dialog visible={visible} onDismiss={hideDialog}>\n *           <Dialog.Title>Alert</Dialog.Title>\n *           <Dialog.Content>\n *             <Paragraph>This is simple dialog</Paragraph>\n *           </Dialog.Content>\n *           <Dialog.Actions>\n *             <Button onPress={hideDialog}>Done</Button>\n *           </Dialog.Actions>\n *         </Dialog>\n *       </Portal>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Dialog extends React.Component<Props> {\n  // @component ./DialogContent.tsx\n  static Content = DialogContent;\n  // @component ./DialogActions.tsx\n  static Actions = DialogActions;\n  // @component ./DialogTitle.tsx\n  static Title = DialogTitle;\n  // @component ./DialogScrollArea.tsx\n  static ScrollArea = DialogScrollArea;\n\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  render() {\n    const {\n      children,\n      dismissable,\n      onDismiss,\n      visible,\n      style,\n      theme,\n    } = this.props;\n\n    return (\n      <Modal\n        dismissable={dismissable}\n        onDismiss={onDismiss}\n        visible={visible}\n        contentContainerStyle={[\n          {\n            borderRadius: theme.roundness,\n            backgroundColor: theme.colors.surface,\n          },\n          styles.container,\n          style,\n        ]}\n      >\n        {React.Children.toArray(children)\n          .filter((child) => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              i === 0 &&\n              React.isValidElement(child) &&\n              child.type === DialogContent\n            ) {\n              // Dialog content is the first item, so we add a top padding\n              return React.cloneElement(child, {\n                style: [{ paddingTop: 24 }, child.props.style],\n              });\n            }\n\n            return child;\n          })}\n      </Modal>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"module"}