{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Asset } from 'expo-asset';\nimport isReactImageFormat from \"./isReactImageFormat\";\nimport fromUriAsync from \"./fromUriAsync\";\n\nvar resolveAsync = function resolveAsync(fileReference) {\n  var options,\n      asset,\n      _asset,\n      output,\n      _asset2,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function resolveAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n          if (!(fileReference instanceof Asset)) {\n            _context.next = 8;\n            break;\n          }\n\n          if (fileReference.localUri) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(fileReference.downloadAsync());\n\n        case 5:\n          return _context.abrupt(\"return\", fileReference);\n\n        case 8:\n          if (!(typeof fileReference === 'string')) {\n            _context.next = 18;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(fromUriAsync(fileReference, options.fileName));\n\n        case 11:\n          asset = _context.sent;\n\n          if (!asset) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(resolveAsync(asset));\n\n        case 15:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 16:\n          _context.next = 36;\n          break;\n\n        case 18:\n          if (!(typeof fileReference === 'number')) {\n            _context.next = 28;\n            break;\n          }\n\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(Asset.fromModule(fileReference));\n\n        case 21:\n          _asset = _context.sent;\n          _context.next = 24;\n          return _regeneratorRuntime.awrap(resolveAsync(_asset));\n\n        case 24:\n          output = _context.sent;\n          return _context.abrupt(\"return\", output);\n\n        case 28:\n          if (!isReactImageFormat(fileReference)) {\n            _context.next = 36;\n            break;\n          }\n\n          _context.next = 31;\n          return _regeneratorRuntime.awrap(fromUriAsync(fileReference.uri, options.fileName));\n\n        case 31:\n          _asset2 = _context.sent;\n\n          if (!_asset2) {\n            _context.next = 36;\n            break;\n          }\n\n          _context.next = 35;\n          return _regeneratorRuntime.awrap(resolveAsync(_asset2));\n\n        case 35:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 36:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default resolveAsync;","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-asset-utils/src/resolveAsync.js"],"names":["Asset","isReactImageFormat","fromUriAsync","resolveAsync","fileReference","options","localUri","downloadAsync","fileName","asset","fromModule","output","uri"],"mappings":";AACA,SAASA,KAAT,QAAsB,YAAtB;AACA,OAAOC,kBAAP;AACA,OAAOC,YAAP;;AAcA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAgCC,UAAAA,OAAhC,2DAAmD,EAAnD;;AAAA,gBACfD,aAAa,YAAYJ,KADV;AAAA;AAAA;AAAA;;AAAA,cAGZI,aAAa,CAACE,QAHF;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAITF,aAAa,CAACG,aAAd,EAJS;;AAAA;AAAA,2CAMVH,aANU;;AAAA;AAAA,gBAOR,OAAOA,aAAP,KAAyB,QAPjB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CASGF,YAAY,CAACE,aAAD,EAAgBC,OAAO,CAACG,QAAxB,CATf;;AAAA;AASXC,UAAAA,KATW;;AAAA,eAUbA,KAVa;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAWFN,YAAY,CAACM,KAAD,CAXV;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,gBAaR,OAAOL,aAAP,KAAyB,QAbjB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAeGJ,KAAK,CAACU,UAAN,CAAiBN,aAAjB,CAfH;;AAAA;AAeXK,UAAAA,MAfW;AAAA;AAAA,2CAgBIN,YAAY,CAACM,MAAD,CAhBhB;;AAAA;AAgBXE,UAAAA,MAhBW;AAAA,2CAiBVA,MAjBU;;AAAA;AAAA,eAkBRV,kBAAkB,CAACG,aAAD,CAlBV;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAoBGF,YAAY,CAACE,aAAa,CAACQ,GAAf,EAAoBP,OAAO,CAACG,QAA5B,CApBf;;AAAA;AAoBXC,UAAAA,OApBW;;AAAA,eAqBbA,OArBa;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAsBFN,YAAY,CAACM,OAAD,CAtBV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AA2BA,eAAeN,YAAf","sourcesContent":["// @flow\nimport { Asset } from 'expo-asset';\nimport isReactImageFormat from './isReactImageFormat';\nimport fromUriAsync from './fromUriAsync';\n\ntype ImageFormat = {\n  uri: string,\n  width?: number,\n  height?: number,\n};\n\nexport type WildCard = Asset | number | string | ImageFormat;\n\nexport type Options = {\n  fileName: string,\n};\n\nconst resolveAsync = async (fileReference: WildCard, options: Options = {}): Promise<?Asset> => {\n  if (fileReference instanceof Asset) {\n    /// Asset\n    if (!fileReference.localUri) {\n      await fileReference.downloadAsync();\n    }\n    return fileReference;\n  } else if (typeof fileReference === 'string') {\n    /// uri\n    const asset = await fromUriAsync(fileReference, options.fileName);\n    if (asset) {\n      return await resolveAsync(asset);\n    }\n  } else if (typeof fileReference === 'number') {\n    /// static resource\n    const asset = await Asset.fromModule(fileReference);\n    const output = await resolveAsync(asset);\n    return output;\n  } else if (isReactImageFormat(fileReference)) {\n    /// { uri: string }\n    const asset = await fromUriAsync(fileReference.uri, options.fileName);\n    if (asset) {\n      return await resolveAsync(asset);\n    }\n  }\n};\n\nexport default resolveAsync;\n"]},"metadata":{},"sourceType":"module"}