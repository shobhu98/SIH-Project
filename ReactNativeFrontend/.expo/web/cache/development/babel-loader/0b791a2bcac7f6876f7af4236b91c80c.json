{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { readAsStringAsync, EncodingType } from 'expo-file-system';\nimport { getSizeAsync } from \"./ImageUtils\";\n\nfunction base64forImageUriAsync(uri) {\n  var size, data;\n  return _regeneratorRuntime.async(function base64forImageUriAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(getSizeAsync(uri));\n\n        case 2:\n          size = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(readAsStringAsync(uri, {\n            encoding: EncodingType.Base64\n          }));\n\n        case 5:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data,\n            size: size\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default base64forImageUriAsync;","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-asset-utils/src/base64forImageUriAsync.js"],"names":["readAsStringAsync","EncodingType","getSizeAsync","base64forImageUriAsync","uri","size","encoding","Base64","data"],"mappings":";AACA,SAASA,iBAAT,EAA4BC,YAA5B,QAAgD,kBAAhD;AACA,SAASC,YAAT;;AAEA,SAAeC,sBAAf,CAAsCC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACqBF,YAAY,CAACE,GAAD,CADjC;;AAAA;AACQC,UAAAA,IADR;AAAA;AAAA,2CAEqBL,iBAAiB,CAACI,GAAD,EAAM;AACxCE,YAAAA,QAAQ,EAAEL,YAAY,CAACM;AADiB,WAAN,CAFtC;;AAAA;AAEQC,UAAAA,IAFR;AAAA,2CAKS;AAAEA,YAAAA,IAAI,EAAJA,IAAF;AAAQH,YAAAA,IAAI,EAAJA;AAAR,WALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAeF,sBAAf","sourcesContent":["// @flow\nimport { readAsStringAsync, EncodingType } from 'expo-file-system';\nimport { getSizeAsync } from './ImageUtils';\n\nasync function base64forImageUriAsync(uri: string): Promise<Data> {\n  const size = await getSizeAsync(uri);\n  const data = await readAsStringAsync(uri, {\n    encoding: EncodingType.Base64,\n  });\n  return { data, size };\n}\n\nexport default base64forImageUriAsync;\n"]},"metadata":{},"sourceType":"module"}