{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToggleButton from \"./ToggleButton\";\n\nvar ToggleButtonRow = function (_React$Component) {\n  _inherits(ToggleButtonRow, _React$Component);\n\n  var _super = _createSuper(ToggleButtonRow);\n\n  function ToggleButtonRow() {\n    _classCallCheck(this, ToggleButtonRow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToggleButtonRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          onValueChange = _this$props.onValueChange,\n          children = _this$props.children,\n          style = _this$props.style;\n      var count = React.Children.count(children);\n      return React.createElement(ToggleButton.Group, {\n        value: value,\n        onValueChange: onValueChange\n      }, React.createElement(View, {\n        style: [styles.row, style]\n      }, React.Children.map(children, function (child, i) {\n        if (child && child.type === ToggleButton) {\n          return React.cloneElement(child, {\n            style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]\n          });\n        }\n\n        return child;\n      })));\n    }\n  }]);\n\n  return ToggleButtonRow;\n}(React.Component);\n\n_defineProperty(ToggleButtonRow, \"displayName\", 'ToggleButton.Row');\n\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow;","map":{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","React","style","count","onValueChange","styles","child","i","row","flexDirection","button","borderWidth","StyleSheet","hairlineWidth","first","borderTopRightRadius","borderBottomRightRadius","middle","borderRadius","borderLeftWidth","last","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,YAAA;;IA+CA,e;;;;;;;;;;;;;6BAGW;AAAA,wBAC2C,KAAlD,KADO;AAAA,UACD,KADC,eACD,KADC;AAAA,UACD,aADC,eACD,aADC;AAAA,UACD,QADC,eACD,QADC;AAAA,UACiCE,KADjC,eACiCA,KADjC;AAEP,UAAMC,KAAK,GAAGF,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAd,QAAcA,CAAd;AAEA,aACE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,KAAA,EAAA;AAAoB,QAAA,KAAK,EAAzB,KAAA;AAAkC,QAAA,aAAa,EAAEG;AAAjD,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAACC,MAAM,CAAP,GAAA,EAAA,KAAA;AAAb,OAAA,EACG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA6B,UAAA,KAAA,EAAA,CAAA,EAAc;AAE1C,YAAIC,KAAK,IAAIA,KAAK,CAALA,IAAAA,KAAb,YAAA,EAA0C;AAExC,iBAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAC/BJ,YAAAA,KAAK,EAAE,CACLG,MAAM,CADD,MAAA,EAELE,CAAC,KAADA,CAAAA,GACIF,MAAM,CADVE,KAAAA,GAEIA,CAAC,KAAKJ,KAAK,GAAXI,CAAAA,GACAF,MAAM,CADNE,IAAAA,GAEAF,MAAM,CANL,MAAA,EAQLC,KAAK,CAALA,KAAAA,CARK,KAAA;AADwB,WAA1B,CAAP;AAYD;;AAED,eAAA,KAAA;AArBR,OAGO,CADH,CADF,CADF;AA0BD;;;;EAjC2BL,KAAK,CAAnC,S;;gBAAMD,e,iBACiB,kB;;AAmCvB,IAAMK,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,GAAG,EAAE;AACHC,IAAAA,aAAa,EAAE;AADZ,GAD0B;AAI/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,WAAW,EAAEC,UAAU,CAACC;AADlB,GAJuB;AAQ/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,oBAAoB,EADf,CAAA;AAELC,IAAAA,uBAAuB,EAAE;AAFpB,GARwB;AAa/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,YAAY,EADN,CAAA;AAENC,IAAAA,eAAe,EAAE;AAFX,GAbuB;AAkB/BC,EAAAA,IAAI,EAAE;AACJD,IAAAA,eAAe,EADX,CAAA;AAEJE,IAAAA,mBAAmB,EAFf,CAAA;AAGJC,IAAAA,sBAAsB,EAAE;AAHpB;AAlByB,CAAlB,CAAf;AAyBA,eAAA,eAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nclass ToggleButtonRow extends React.Component<Props> {\n  static displayName = 'ToggleButton.Row';\n\n  render() {\n    const { value, onValueChange, children, style } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButton.Group value={value} onValueChange={onValueChange}>\n        <View style={[styles.row, style]}>\n          {React.Children.map(children, (child, i) => {\n            // @ts-ignore\n            if (child && child.type === ToggleButton) {\n              // @ts-ignore\n              return React.cloneElement(child, {\n                style: [\n                  styles.button,\n                  i === 0\n                    ? styles.first\n                    : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                  // @ts-ignore\n                  child.props.style,\n                ],\n              });\n            }\n\n            return child;\n          })}\n        </View>\n      </ToggleButton.Group>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n"]},"metadata":{},"sourceType":"module"}