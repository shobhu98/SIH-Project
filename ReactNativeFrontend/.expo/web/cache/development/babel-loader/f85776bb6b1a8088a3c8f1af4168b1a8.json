{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { uriAsync } from 'expo-asset-utils';\nimport { readAsStringAsync } from 'expo-file-system';\nimport PIXI from \"./Pixi\";\n\nfunction isFunction(functionToCheck) {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\nfunction jsonFromResourceAsync(resource) {\n  var jsonUrl, jsonString;\n  return _regeneratorRuntime.async(function jsonFromResourceAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(uriAsync(resource));\n\n        case 2:\n          jsonUrl = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(readAsStringAsync(jsonUrl));\n\n        case 5:\n          jsonString = _context.sent;\n          return _context.abrupt(\"return\", JSON.parse(jsonString));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction spineAsync(_ref) {\n  var json, atlas, assetProvider, _PIXI$spine, Spine, core, TextureAtlas, AtlasAttachmentLoader, SkeletonJson, _json, atlasUrl, _atlas, customAssetProvider, spineAtlas, atlasAttachment, spineJsonParser, spineData;\n\n  return _regeneratorRuntime.async(function spineAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          json = _ref.json, atlas = _ref.atlas, assetProvider = _ref.assetProvider;\n\n          if (!PIXI.spine) {\n            require('pixi-spine');\n          }\n\n          _PIXI$spine = PIXI.spine, Spine = _PIXI$spine.Spine, core = _PIXI$spine.core;\n          TextureAtlas = core.TextureAtlas, AtlasAttachmentLoader = core.AtlasAttachmentLoader, SkeletonJson = core.SkeletonJson;\n          _json = null;\n\n          if (!(json === null)) {\n            _context5.next = 10;\n            break;\n          }\n\n          console.error('loadSpineAsync: Please provide a valid resource for the `json` prop');\n          return _context5.abrupt(\"return\", null);\n\n        case 10:\n          if (!(typeof json === 'number')) {\n            _context5.next = 16;\n            break;\n          }\n\n          _context5.next = 13;\n          return _regeneratorRuntime.awrap(jsonFromResourceAsync(json));\n\n        case 13:\n          _json = _context5.sent;\n          _context5.next = 24;\n          break;\n\n        case 16:\n          if (!(typeof json === 'object')) {\n            _context5.next = 24;\n            break;\n          }\n\n          if (!json.bones) {\n            _context5.next = 21;\n            break;\n          }\n\n          _json = json;\n          _context5.next = 24;\n          break;\n\n        case 21:\n          _context5.next = 23;\n          return _regeneratorRuntime.awrap(jsonFromResourceAsync(json));\n\n        case 23:\n          _json = _context5.sent;\n\n        case 24:\n          _context5.next = 26;\n          return _regeneratorRuntime.awrap(uriAsync(atlas));\n\n        case 26:\n          atlasUrl = _context5.sent;\n          _context5.next = 29;\n          return _regeneratorRuntime.awrap(readAsStringAsync(atlasUrl));\n\n        case 29:\n          _atlas = _context5.sent;\n\n          if (!_json || typeof _atlas !== 'string') {\n            console.error('loadSpine: Invalid props. Please provide: `{ json: Object, atlas: string, assetProvider: Function }`');\n          }\n\n          customAssetProvider = function customAssetProvider(line, callback) {\n            var getAsset, asset, texture;\n            return _regeneratorRuntime.async(function customAssetProvider$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    getAsset = function getAsset() {\n                      return _regeneratorRuntime.async(function getAsset$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              if (!isFunction(assetProvider)) {\n                                _context3.next = 4;\n                                break;\n                              }\n\n                              return _context3.abrupt(\"return\", new Promise(function _callee(res) {\n                                var resource;\n                                return _regeneratorRuntime.async(function _callee$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        _context2.next = 2;\n                                        return _regeneratorRuntime.awrap(assetProvider(line, res));\n\n                                      case 2:\n                                        resource = _context2.sent;\n\n                                        if (resource) {\n                                          res(resource);\n                                        }\n\n                                      case 4:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, null, null, null, Promise);\n                              }));\n\n                            case 4:\n                              if (!isObject(assetProvider)) {\n                                _context3.next = 12;\n                                break;\n                              }\n\n                              if (!(line in assetProvider)) {\n                                _context3.next = 9;\n                                break;\n                              }\n\n                              return _context3.abrupt(\"return\", assetProvider[line]);\n\n                            case 9:\n                              console.error(\"loadSpine: object `assetProvider` doesn't contain key\", line);\n\n                            case 10:\n                              _context3.next = 13;\n                              break;\n\n                            case 12:\n                              console.error('loadSpine: prop `assetProvider` must be a function: (path: string, loaderFunction: (tex: PIXI.BaseTexture) => any) => any, callback?: (obj: TextureAtlas) => any');\n\n                            case 13:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    };\n\n                    _context4.next = 3;\n                    return _regeneratorRuntime.awrap(getAsset());\n\n                  case 3:\n                    asset = _context4.sent;\n\n                    if (!asset) {\n                      _context4.next = 19;\n                      break;\n                    }\n\n                    if (!(asset instanceof PIXI.BaseTexture)) {\n                      _context4.next = 10;\n                      break;\n                    }\n\n                    callback(asset || asset.baseTexture);\n                    return _context4.abrupt(\"return\");\n\n                  case 10:\n                    _context4.next = 12;\n                    return _regeneratorRuntime.awrap(PIXI.Texture.fromExpoAsync(asset));\n\n                  case 12:\n                    texture = _context4.sent;\n\n                    if (!texture) {\n                      _context4.next = 18;\n                      break;\n                    }\n\n                    callback(texture.baseTexture || texture);\n                    return _context4.abrupt(\"return\");\n\n                  case 18:\n                    console.error('loadSpine: invalid texture provided for', line);\n\n                  case 19:\n                    callback(null);\n\n                  case 20:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          _context5.next = 34;\n          return _regeneratorRuntime.awrap(new Promise(function (res) {\n            return new TextureAtlas(_atlas, customAssetProvider, res);\n          }));\n\n        case 34:\n          spineAtlas = _context5.sent;\n          atlasAttachment = new AtlasAttachmentLoader(spineAtlas);\n          spineJsonParser = new SkeletonJson(atlasAttachment);\n          spineData = spineJsonParser.readSkeletonData(_json);\n          return _context5.abrupt(\"return\", new Spine(spineData));\n\n        case 39:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default spineAsync;","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-pixi/lib/spineAsync.js"],"names":["uriAsync","readAsStringAsync","PIXI","isFunction","functionToCheck","toString","call","isObject","obj","jsonFromResourceAsync","resource","jsonUrl","jsonString","JSON","parse","spineAsync","json","atlas","assetProvider","spine","require","Spine","core","TextureAtlas","AtlasAttachmentLoader","SkeletonJson","_json","console","error","bones","atlasUrl","_atlas","customAssetProvider","line","callback","getAsset","Promise","res","asset","BaseTexture","baseTexture","Texture","fromExpoAsync","texture","spineAtlas","atlasAttachment","spineJsonParser","spineData","readSkeletonData"],"mappings":"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","sourcesContent":["import { uriAsync } from 'expo-asset-utils';\nimport { readAsStringAsync } from 'expo-file-system';\nimport PIXI from './Pixi';\n\nfunction isFunction(functionToCheck) {\n  return (\n    functionToCheck && {}.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\nasync function jsonFromResourceAsync(resource) {\n  const jsonUrl = await uriAsync(resource);\n  const jsonString = await readAsStringAsync(jsonUrl);\n  return JSON.parse(jsonString);\n}\n\nasync function spineAsync({ json, atlas, assetProvider }) {\n  // If spine doesn't exist in the global instance of PIXI, import it!\n  if (!PIXI.spine) {\n    require('pixi-spine');\n    // console.error('loadSpineAsync: please import `pixi-spine`');\n  }\n  const { Spine, core } = PIXI.spine;\n  const { TextureAtlas, AtlasAttachmentLoader, SkeletonJson } = core;\n\n  // Parse json - it's a mess because sometimes json can be loaded as a resource, in that case we want to download and parse it.\n  let _json = null;\n  if (json === null) {\n    console.error(\n      'loadSpineAsync: Please provide a valid resource for the `json` prop'\n    );\n    return null;\n  } else {\n    if (typeof json === 'number') {\n      _json = await jsonFromResourceAsync(json);\n    } else if (typeof json === 'object') {\n      if (json.bones) {\n        _json = json;\n      } else {\n        _json = await jsonFromResourceAsync(json);\n      }\n    }\n  }\n  // Downlaod the atlas file\n  const atlasUrl = await uriAsync(atlas);\n  const _atlas = await readAsStringAsync(atlasUrl);\n\n  if (!_json || typeof _atlas !== 'string') {\n    console.error(\n      'loadSpine: Invalid props. Please provide: `{ json: Object, atlas: string, assetProvider: Function }`'\n    );\n  }\n\n  const customAssetProvider = async (line, callback) => {\n    const getAsset = async () => {\n      if (isFunction(assetProvider)) {\n        return new Promise(async res => {\n          const resource = await assetProvider(line, res);\n          if (resource) {\n            res(resource);\n          }\n        });\n      } else if (isObject(assetProvider)) {\n        if (line in assetProvider) {\n          return assetProvider[line];\n        } else {\n          console.error(\n            \"loadSpine: object `assetProvider` doesn't contain key\",\n            line\n          );\n        }\n      } else {\n        console.error(\n          'loadSpine: prop `assetProvider` must be a function: (path: string, loaderFunction: (tex: PIXI.BaseTexture) => any) => any, callback?: (obj: TextureAtlas) => any'\n        );\n      }\n    };\n\n    const asset = await getAsset();\n    if (asset) {\n      if (asset instanceof PIXI.BaseTexture) {\n        callback(asset || asset.baseTexture);\n        return;\n      } else {\n        const texture = await PIXI.Texture.fromExpoAsync(asset);\n        if (texture) {\n          callback(texture.baseTexture || texture);\n          return;\n        } else {\n          console.error('loadSpine: invalid texture provided for', line);\n        }\n      }\n    }\n\n    callback(null);\n  };\n\n  const spineAtlas = await new Promise(\n    res => new TextureAtlas(_atlas, customAssetProvider, res)\n  );\n  const atlasAttachment = new AtlasAttachmentLoader(spineAtlas);\n  const spineJsonParser = new SkeletonJson(atlasAttachment);\n  const spineData = spineJsonParser.readSkeletonData(_json);\n  // Create spine instance\n  return new Spine(spineData);\n}\n\nexport default spineAsync;\n"]},"metadata":{},"sourceType":"module"}