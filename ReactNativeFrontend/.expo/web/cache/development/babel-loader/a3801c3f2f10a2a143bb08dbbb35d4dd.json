{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/pages/Language.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Container, Header, Left, Body, Right, Title, StyleProvider, Content, Form, Item, Input, Label } from 'native-base';\nimport getTheme from \"../native-base-theme/components\";\nimport material from \"../native-base-theme/variables/variables\";\nimport { Button } from 'react-native-paper';\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AsyncStorage from '@react-native-community/async-storage';\n\nvar theme = _objectSpread(_objectSpread({}, DefaultTheme), {}, {\n  roundness: 2,\n  colors: _objectSpread(_objectSpread({}, DefaultTheme.colors), {}, {\n    primary: '#FF4B63',\n    accent: '#f1c40f'\n  })\n});\n\nvar styles = StyleSheet.create({\n  englishButton: {\n    margin: 40,\n    padding: 30\n  },\n  hindiButton: {\n    marginRight: 40,\n    marginLeft: 40,\n    marginBottom: 10,\n    padding: 30,\n    borderColor: \"#FF4B63\",\n    borderWidth: 2\n  }\n});\n\nvar Language = function (_React$Component) {\n  _inherits(Language, _React$Component);\n\n  var _super = _createSuper(Language);\n\n  function Language(props) {\n    var _this;\n\n    _classCallCheck(this, Language);\n\n    _this = _super.call(this, props);\n    _this.engButton = _this.engButton.bind(_assertThisInitialized(_this));\n    _this.hindiButton = _this.hindiButton.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Language, [{\n    key: \"engButton\",\n    value: function engButton() {\n      return _regeneratorRuntime.async(function engButton$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('@lang', \"en\"));\n\n            case 3:\n              console.log(\"set\");\n              this.props.navigation.navigate('Login');\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 7]], Promise);\n    }\n  }, {\n    key: \"hindiButton\",\n    value: function hindiButton() {\n      return _regeneratorRuntime.async(function hindiButton$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('@lang', \"hi\"));\n\n            case 3:\n              this.props.navigation.navigate('Login');\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 6]], Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }\n      }, React.createElement(StyleProvider, {\n        style: getTheme(material),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }\n      }, \"Virtual Police Station\"))), React.createElement(PaperProvider, {\n        theme: theme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, React.createElement(Button, {\n        mode: \"contained\",\n        dark: true,\n        onPress: this.engButton,\n        style: styles.englishButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 22\n        }\n      }, \"English\"), React.createElement(Button, {\n        mode: \"outlined\",\n        onPress: this.hindiButton,\n        style: styles.hindiButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 22\n        }\n      }, \"\\u0939\\u093F\\u0902\\u0926\\u0940\")));\n    }\n  }]);\n\n  return Language;\n}(React.Component);\n\nexport { Language as default };","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/pages/Language.js"],"names":["React","Container","Header","Left","Body","Right","Title","StyleProvider","Content","Form","Item","Input","Label","getTheme","material","Button","DefaultTheme","Provider","PaperProvider","AsyncStorage","theme","roundness","colors","primary","accent","styles","StyleSheet","create","englishButton","margin","padding","hindiButton","marginRight","marginLeft","marginBottom","borderColor","borderWidth","Language","props","engButton","bind","setItem","console","log","navigation","navigate","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Container, Header, Left, Body, Right, Title, StyleProvider, Content, Form, Item, Input, Label } from 'native-base';\nimport getTheme from '../native-base-theme/components';\n import material from '../native-base-theme/variables/variables';\nimport { Button } from 'react-native-paper';\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\nimport {StyleSheet} from 'react-native';\nimport AsyncStorage from '@react-native-community/async-storage';\n\nconst theme = {\n    ...DefaultTheme,\n    roundness: 2,\n    colors: {\n        ...DefaultTheme.colors,\n        primary: '#FF4B63',\n        accent: '#f1c40f',\n    },\n};\n\nconst styles = StyleSheet.create({\n    englishButton: {\n      margin: 40,\n      padding:30\n    },\n    hindiButton: {\n        marginRight:40,\n        marginLeft:40, \n        marginBottom:10, \n        padding:30, \n        borderColor:\"#FF4B63\",\n        borderWidth: 2,\n    },\n});\n\nexport default class Language extends React.Component{\n    constructor(props){\n        super(props);\n        this.engButton=this.engButton.bind(this);\n        this.hindiButton=this.hindiButton.bind(this);\n    }\n    async engButton(){\n        // AsyncStorage.getAllKeys((err, keys) => {\n        //     AsyncStorage.multiGet(keys, (error, stores) => {\n        //       stores.map((result, i, store) => {\n        //         console.log({ [store[i][0]]: store[i][1] });\n        //         return true;\n        //       });\n        //     });\n        //   });\n        try {\n            await AsyncStorage.setItem('@lang', \"en\");\n            console.log(\"set\");\n            this.props.navigation.navigate('Login');\n        } catch (e) {\n            console.log(e);\n        }\n        \n    }\n    async hindiButton(){\n        try {\n            await AsyncStorage.setItem('@lang', \"hi\");\n            this.props.navigation.navigate('Login');\n\n        } catch (e) {\n            console.log(e);\n        }\n        \n    }\n    render(){\n        return(\n            <Container >\n                <StyleProvider style={getTheme(material)}>\n                    <Header>\n                        <Title>Virtual Police Station</Title>\n                    </Header>\n                </StyleProvider>\n                <PaperProvider theme={theme}>\n                     <Button mode=\"contained\" dark onPress={this.engButton} style={styles.englishButton} >\n                         English \n                     </Button>\n                     <Button mode=\"outlined\" onPress={this.hindiButton} style={styles.hindiButton} >\n                         हिंदी\n                     </Button>\n                 </PaperProvider>\n            </Container>\n        );\n    }\n    \n}\n"]},"metadata":{},"sourceType":"module"}