{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport resolveAsync from \"./resolveAsync\";\n\nfunction uriAsync(fileReference, options) {\n  var asset;\n  return _regeneratorRuntime.async(function uriAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(resolveAsync(fileReference, options));\n\n        case 2:\n          asset = _context.sent;\n\n          if (asset) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error(\"expo-asset-utils: uriAsync(): failed to resolve asset: \" + fileReference);\n\n        case 5:\n          return _context.abrupt(\"return\", asset.localUri);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default uriAsync;","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-asset-utils/src/uriAsync.js"],"names":["resolveAsync","uriAsync","fileReference","options","asset","Error","localUri"],"mappings":";AAGA,OAAOA,YAAP;;AAEA,SAAeC,QAAf,CAAwBC,aAAxB,EAAiDC,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACsBH,YAAY,CAACE,aAAD,EAAgBC,OAAhB,CADlC;;AAAA;AACQC,UAAAA,KADR;;AAAA,cAEOA,KAFP;AAAA;AAAA;AAAA;;AAAA,gBAGU,IAAIC,KAAJ,6DAAoEH,aAApE,CAHV;;AAAA;AAAA,2CAKSE,KAAK,CAACE,QALf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAeL,QAAf","sourcesContent":["// @flow\n\nimport type { WildCard } from './resolveAsync';\nimport resolveAsync from './resolveAsync';\n\nasync function uriAsync(fileReference: WildCard, options): Promise<?string> {\n  const asset = await resolveAsync(fileReference, options);\n  if (!asset) {\n    throw new Error(`expo-asset-utils: uriAsync(): failed to resolve asset: ${fileReference}`);\n  }\n  return asset.localUri;\n}\n\nexport default uriAsync;\n"]},"metadata":{},"sourceType":"module"}