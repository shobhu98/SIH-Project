{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar invariant_1 = __importDefault(require(\"invariant\"));\n\nvar Voice = react_native_1.NativeModules.Voice;\nvar voiceEmitter = react_native_1.Platform.OS !== 'web' ? new react_native_1.NativeEventEmitter(Voice) : null;\n\nvar RCTVoice = function () {\n  function RCTVoice() {\n    _classCallCheck(this, RCTVoice);\n\n    this._loaded = false;\n    this._listeners = null;\n    this._events = {\n      onSpeechStart: function onSpeechStart() {},\n      onSpeechRecognized: function onSpeechRecognized() {},\n      onSpeechEnd: function onSpeechEnd() {},\n      onSpeechError: function onSpeechError() {},\n      onSpeechResults: function onSpeechResults() {},\n      onSpeechPartialResults: function onSpeechPartialResults() {},\n      onSpeechVolumeChanged: function onSpeechVolumeChanged() {}\n    };\n  }\n\n  _createClass(RCTVoice, [{\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      Voice.onSpeechStart = undefined;\n      Voice.onSpeechRecognized = undefined;\n      Voice.onSpeechEnd = undefined;\n      Voice.onSpeechError = undefined;\n      Voice.onSpeechResults = undefined;\n      Voice.onSpeechPartialResults = undefined;\n      Voice.onSpeechVolumeChanged = undefined;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        Voice.destroySpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            if (_this._listeners) {\n              _this._listeners.map(function (listener) {\n                return listener.remove();\n              });\n\n              _this._listeners = null;\n            }\n\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start(locale) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n        this._listeners = Object.keys(this._events).map(function (key) {\n          return voiceEmitter.addListener(key, _this2._events[key]);\n        });\n      }\n\n      return new Promise(function (resolve, reject) {\n        var callback = function callback(error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        };\n\n        if (react_native_1.Platform.OS === 'android') {\n          Voice.startSpeech(locale, _extends({\n            EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n            EXTRA_MAX_RESULTS: 5,\n            EXTRA_PARTIAL_RESULTS: true,\n            REQUEST_PERMISSIONS_AUTO: true\n          }, options), callback);\n        } else {\n          Voice.startSpeech(locale, callback);\n        }\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        Voice.stopSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        Voice.cancelSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      return new Promise(function (resolve, reject) {\n        Voice.isSpeechAvailable(function (isAvailable, error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve(isAvailable);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getSpeechRecognitionServices\",\n    value: function getSpeechRecognitionServices() {\n      if (react_native_1.Platform.OS !== 'android') {\n        invariant_1.default(Voice, 'Speech recognition services can be queried for only on Android');\n        return;\n      }\n\n      return Voice.getSpeechRecognitionServices();\n    }\n  }, {\n    key: \"isRecognizing\",\n    value: function isRecognizing() {\n      return new Promise(function (resolve) {\n        Voice.isRecognizing(function (isRecognizing) {\n          return resolve(isRecognizing);\n        });\n      });\n    }\n  }, {\n    key: \"onSpeechStart\",\n    set: function set(fn) {\n      this._events.onSpeechStart = fn;\n    }\n  }, {\n    key: \"onSpeechRecognized\",\n    set: function set(fn) {\n      this._events.onSpeechRecognized = fn;\n    }\n  }, {\n    key: \"onSpeechEnd\",\n    set: function set(fn) {\n      this._events.onSpeechEnd = fn;\n    }\n  }, {\n    key: \"onSpeechError\",\n    set: function set(fn) {\n      this._events.onSpeechError = fn;\n    }\n  }, {\n    key: \"onSpeechResults\",\n    set: function set(fn) {\n      this._events.onSpeechResults = fn;\n    }\n  }, {\n    key: \"onSpeechPartialResults\",\n    set: function set(fn) {\n      this._events.onSpeechPartialResults = fn;\n    }\n  }, {\n    key: \"onSpeechVolumeChanged\",\n    set: function set(fn) {\n      this._events.onSpeechVolumeChanged = fn;\n    }\n  }]);\n\n  return RCTVoice;\n}();\n\nexports.default = new RCTVoice();","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/@react-native-community/voice/dist/index.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","invariant_1","require","Voice","react_native_1","NativeModules","voiceEmitter","Platform","OS","NativeEventEmitter","RCTVoice","_loaded","_listeners","_events","onSpeechStart","onSpeechRecognized","onSpeechEnd","onSpeechError","onSpeechResults","onSpeechPartialResults","onSpeechVolumeChanged","undefined","Promise","resolve","reject","destroySpeech","error","Error","map","listener","remove","locale","options","keys","key","addListener","callback","startSpeech","EXTRA_LANGUAGE_MODEL","EXTRA_MAX_RESULTS","EXTRA_PARTIAL_RESULTS","REQUEST_PERMISSIONS_AUTO","stopSpeech","cancelSpeech","isSpeechAvailable","isAvailable","default","getSpeechRecognitionServices","isRecognizing","fn"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_native_1 = require(\"react-native\");\nconst invariant_1 = __importDefault(require(\"invariant\"));\nconst Voice = react_native_1.NativeModules.Voice;\n// NativeEventEmitter is only availabe on React Native platforms, so this conditional is used to avoid import conflicts in the browser/server\nconst voiceEmitter = react_native_1.Platform.OS !== 'web' ? new react_native_1.NativeEventEmitter(Voice) : null;\nclass RCTVoice {\n    constructor() {\n        this._loaded = false;\n        this._listeners = null;\n        this._events = {\n            onSpeechStart: () => { },\n            onSpeechRecognized: () => { },\n            onSpeechEnd: () => { },\n            onSpeechError: () => { },\n            onSpeechResults: () => { },\n            onSpeechPartialResults: () => { },\n            onSpeechVolumeChanged: () => { },\n        };\n    }\n    removeAllListeners() {\n        Voice.onSpeechStart = undefined;\n        Voice.onSpeechRecognized = undefined;\n        Voice.onSpeechEnd = undefined;\n        Voice.onSpeechError = undefined;\n        Voice.onSpeechResults = undefined;\n        Voice.onSpeechPartialResults = undefined;\n        Voice.onSpeechVolumeChanged = undefined;\n    }\n    destroy() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.destroySpeech((error) => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    if (this._listeners) {\n                        this._listeners.map(listener => listener.remove());\n                        this._listeners = null;\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n    start(locale, options = {}) {\n        if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n            this._listeners = Object.keys(this._events).map((key) => voiceEmitter.addListener(key, this._events[key]));\n        }\n        return new Promise((resolve, reject) => {\n            const callback = (error) => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve();\n                }\n            };\n            if (react_native_1.Platform.OS === 'android') {\n                Voice.startSpeech(locale, Object.assign({\n                    EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n                    EXTRA_MAX_RESULTS: 5,\n                    EXTRA_PARTIAL_RESULTS: true,\n                    REQUEST_PERMISSIONS_AUTO: true,\n                }, options), callback);\n            }\n            else {\n                Voice.startSpeech(locale, callback);\n            }\n        });\n    }\n    stop() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.stopSpeech(error => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    cancel() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.cancelSpeech(error => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    isAvailable() {\n        return new Promise((resolve, reject) => {\n            Voice.isSpeechAvailable((isAvailable, error) => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve(isAvailable);\n                }\n            });\n        });\n    }\n    /**\n     * (Android) Get a list of the speech recognition engines available on the device\n     * */\n    getSpeechRecognitionServices() {\n        if (react_native_1.Platform.OS !== 'android') {\n            invariant_1.default(Voice, 'Speech recognition services can be queried for only on Android');\n            return;\n        }\n        return Voice.getSpeechRecognitionServices();\n    }\n    isRecognizing() {\n        return new Promise(resolve => {\n            Voice.isRecognizing((isRecognizing) => resolve(isRecognizing));\n        });\n    }\n    set onSpeechStart(fn) {\n        this._events.onSpeechStart = fn;\n    }\n    set onSpeechRecognized(fn) {\n        this._events.onSpeechRecognized = fn;\n    }\n    set onSpeechEnd(fn) {\n        this._events.onSpeechEnd = fn;\n    }\n    set onSpeechError(fn) {\n        this._events.onSpeechError = fn;\n    }\n    set onSpeechResults(fn) {\n        this._events.onSpeechResults = fn;\n    }\n    set onSpeechPartialResults(fn) {\n        this._events.onSpeechPartialResults = fn;\n    }\n    set onSpeechVolumeChanged(fn) {\n        this._events.onSpeechVolumeChanged = fn;\n    }\n}\nexports.default = new RCTVoice();\n"]},"metadata":{},"sourceType":"script"}