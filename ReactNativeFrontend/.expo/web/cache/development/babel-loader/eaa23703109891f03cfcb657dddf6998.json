{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-pixi/lib/components/FilterImage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport { GLView } from 'expo-gl';\nimport { Asset } from 'expo-asset';\nimport PIXI from \"../Pixi\";\nimport { takeSnapshotAsync } from \"../utils\";\nglobal.__ExpoFilterImageId = global.__ExpoFilterImageId || 0;\n\nfunction centerSprite(sprite, parent) {\n  sprite.x = (parent.width - sprite.width) / 2;\n  sprite.y = (parent.height - sprite.height) / 2;\n}\n\nfunction adjustRatio(sprite, parent, isCover) {\n  var other = function other(side) {\n    return side === 'width' ? 'height' : 'width';\n  };\n\n  var longest;\n\n  if (sprite.width < sprite.height) {\n    longest = isCover ? 'width' : 'height';\n  } else {\n    longest = isCover ? 'height' : 'width';\n  }\n\n  var shortest = other(longest);\n  var ratio = sprite[shortest] / sprite[longest];\n  sprite[longest] = parent[longest];\n  sprite[shortest] = parent[longest] * ratio;\n}\n\nvar FilterImage = function (_React$Component) {\n  _inherits(FilterImage, _React$Component);\n\n  var _super = _createSuper(FilterImage);\n\n  function FilterImage() {\n    var _this;\n\n    _classCallCheck(this, FilterImage);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n\n    _this.updateTextureAsync = function _callee(source) {\n      var texture;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!_this.renderer || !_this.image || !source)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(PIXI.Texture.fromExpoAsync(source));\n\n            case 4:\n              texture = _context.sent;\n\n              if (source === _this.props.source) {\n                _this.image.texture = texture;\n              }\n\n              _this.renderer._update();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.updateResizeMode = function (resizeMode) {\n      if (!_this.renderer || !_this.image || !resizeMode) {\n        return;\n      }\n\n      var _this$renderer = _this.renderer,\n          width = _this$renderer.width,\n          height = _this$renderer.height;\n      var willInvert = height > width;\n      var cover = resizeMode.toLowerCase() === 'cover';\n\n      if (willInvert) {\n        cover = !cover;\n      }\n\n      adjustRatio(_this.image, _this.renderer, cover);\n      centerSprite(_this.image, _this.renderer);\n\n      _this.renderer._update();\n    };\n\n    _this.updateFilters = function (filters) {\n      if (!_this.renderer || !_this.image || !filters) {\n        return;\n      }\n\n      if (!Array.isArray(filters)) {\n        _this.image.filters = [filters];\n      } else {\n        _this.image.filters = filters;\n      }\n\n      _this.renderer._update();\n    };\n\n    _this.takeSnapshotAsync = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return takeSnapshotAsync.apply(void 0, [_this.glView].concat(args));\n    };\n\n    _this.onLayout = function (_ref) {\n      var _ref$nativeEvent$layo = _ref.nativeEvent.layout,\n          width = _ref$nativeEvent$layo.width,\n          height = _ref$nativeEvent$layo.height;\n\n      if (_this.renderer) {\n        var scale = PixelRatio.get();\n\n        _this.renderer.resize(width * scale, height * scale);\n      }\n\n      _this.updateResizeMode(_this.props.resizeMode);\n    };\n\n    _this.onContextCreate = function _callee2(context) {\n      var _this$props, filters, resizeMode, source, getAttributes;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$props = _this.props, filters = _this$props.filters, resizeMode = _this$props.resizeMode, source = _this$props.source;\n              _this.context = context;\n              _this.stage = new PIXI.Container();\n\n              getAttributes = context.getContextAttributes || function () {\n                return {};\n              };\n\n              context.getContextAttributes = function () {\n                var contextAttributes = getAttributes();\n                return _objectSpread(_objectSpread({}, contextAttributes), {}, {\n                  stencil: true\n                });\n              };\n\n              _this.renderer = PIXI.autoDetectRenderer(context.drawingBufferWidth, context.drawingBufferHeight, {\n                context: context,\n                antialias: true,\n                backgroundColor: 'transparent',\n                transparent: true,\n                autoStart: false\n              });\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(PIXI.Sprite.fromExpoAsync(source));\n\n            case 8:\n              _this.image = _context2.sent;\n\n              _this.stage.addChild(_this.image);\n\n              _this.renderer._update = function () {\n                _this.renderer.render(_this.stage);\n\n                context.endFrameEXP();\n              };\n\n              _this.updateResizeMode(resizeMode);\n\n              _this.updateFilters(filters);\n\n              _this.props.onReady && _this.props.onReady(context);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.setRef = function (ref) {\n      _this.glView = ref;\n    };\n\n    return _this;\n  }\n\n  _createClass(FilterImage, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      global.__ExpoFilterImageId++;\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var props = this.props;\n\n      if (nextProps.resizeMode !== props.resizeMode) {\n        this.updateResizeMode(nextProps.resizeMode);\n      }\n\n      if (nextProps.source !== props.source) {\n        this.updateTextureAsync(nextProps.source);\n      }\n\n      if (nextProps.filters !== props.filters) {\n        this.updateFilters(nextProps.filters);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GLView, _extends({\n        onLayout: this.onLayout,\n        key: 'Expo.FilterImage-' + global.__ExpoSketchId,\n        ref: this.setRef\n      }, this.props, {\n        onContextCreate: this.onContextCreate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return FilterImage;\n}(React.Component);\n\nexport { FilterImage as default };","map":{"version":3,"sources":["/Users/cosentus/Documents/GitHub/SIH-Project/ReactNativeFrontend/node_modules/expo-pixi/lib/components/FilterImage.js"],"names":["React","GLView","Asset","PIXI","takeSnapshotAsync","global","__ExpoFilterImageId","centerSprite","sprite","parent","x","width","y","height","adjustRatio","isCover","other","side","longest","shortest","ratio","FilterImage","updateTextureAsync","source","renderer","image","Texture","fromExpoAsync","texture","props","_update","updateResizeMode","resizeMode","willInvert","cover","toLowerCase","updateFilters","filters","Array","isArray","args","glView","onLayout","nativeEvent","layout","scale","PixelRatio","get","resize","onContextCreate","context","stage","Container","getAttributes","getContextAttributes","contextAttributes","stencil","autoDetectRenderer","drawingBufferWidth","drawingBufferHeight","antialias","backgroundColor","transparent","autoStart","Sprite","addChild","render","endFrameEXP","onReady","setRef","ref","nextProps","nextState","__ExpoSketchId","Component"],"mappings":"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","sourcesContent":["//@flow\nimport React from 'react';\nimport { PixelRatio } from 'react-native';\nimport { GLView } from 'expo-gl';\nimport { Asset } from 'expo-asset';\n\nimport PIXI from '../Pixi';\nimport { takeSnapshotAsync } from '../utils';\n\nglobal.__ExpoFilterImageId = global.__ExpoFilterImageId || 0;\n\nfunction centerSprite(sprite: PIXI.Sprite, parent) {\n  sprite.x = (parent.width - sprite.width) / 2;\n  sprite.y = (parent.height - sprite.height) / 2;\n}\n\nfunction adjustRatio(sprite, parent, isCover) {\n  const other = side => (side === 'width' ? 'height' : 'width');\n\n  let longest;\n  if (sprite.width < sprite.height) {\n    longest = isCover ? 'width' : 'height';\n  } else {\n    longest = isCover ? 'height' : 'width';\n  }\n\n  let shortest = other(longest);\n\n  const ratio = sprite[shortest] / sprite[longest];\n  sprite[longest] = parent[longest];\n  sprite[shortest] = parent[longest] * ratio;\n}\n\ntype Props = {\n  source: string | number | Asset,\n  resizeMode: string,\n  filters: Array<PIXI.Filter>,\n};\n\nexport default class FilterImage extends React.Component<Props> {\n  componentWillMount() {\n    global.__ExpoFilterImageId++;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { props } = this;\n\n    if (nextProps.resizeMode !== props.resizeMode) {\n      this.updateResizeMode(nextProps.resizeMode);\n    }\n    if (nextProps.source !== props.source) {\n      this.updateTextureAsync(nextProps.source);\n    }\n    if (nextProps.filters !== props.filters) {\n      this.updateFilters(nextProps.filters);\n    }\n\n    return false;\n  }\n\n  updateTextureAsync = async source => {\n    if (!this.renderer || !this.image || !source) {\n      return;\n    }\n    const texture = await PIXI.Texture.fromExpoAsync(source);\n    if (source === this.props.source) {\n      this.image.texture = texture;\n    }\n    this.renderer._update();\n  };\n\n  updateResizeMode = resizeMode => {\n    if (!this.renderer || !this.image || !resizeMode) {\n      return;\n    }\n\n    const { width, height } = this.renderer;\n    const willInvert = height > width;\n    let cover = resizeMode.toLowerCase() === 'cover';\n    if (willInvert) {\n      cover = !cover;\n    }\n    adjustRatio(this.image, this.renderer, cover);\n    centerSprite(this.image, this.renderer);\n    this.renderer._update();\n  };\n\n  updateFilters = filters => {\n    if (!this.renderer || !this.image || !filters) {\n      return;\n    }\n    if (!Array.isArray(filters)) {\n      this.image.filters = [filters];\n    } else {\n      this.image.filters = filters;\n    }\n\n    this.renderer._update();\n  };\n\n  takeSnapshotAsync = (...args) => {\n    return takeSnapshotAsync(this.glView, ...args);\n  };\n\n  onLayout = ({\n    nativeEvent: {\n      layout: { width, height },\n    },\n  }) => {\n    if (this.renderer) {\n      const scale = PixelRatio.get();\n      this.renderer.resize(width * scale, height * scale);\n    }\n    this.updateResizeMode(this.props.resizeMode);\n  };\n\n  onContextCreate = async (context: WebGLRenderingContext) => {\n    const { filters, resizeMode, source } = this.props;\n\n    this.context = context;\n    this.stage = new PIXI.Container();\n\n    const getAttributes = context.getContextAttributes || (() => ({}));\n    context.getContextAttributes = () => {\n      const contextAttributes = getAttributes();\n      return {\n        ...contextAttributes,\n        stencil: true,\n      };\n    };\n\n    this.renderer = PIXI.autoDetectRenderer(\n      context.drawingBufferWidth,\n      context.drawingBufferHeight,\n      {\n        context,\n        antialias: true,\n        backgroundColor: 'transparent',\n        transparent: true,\n        autoStart: false,\n      }\n    );\n\n    this.image = await PIXI.Sprite.fromExpoAsync(source);\n    this.stage.addChild(this.image);\n\n    this.renderer._update = () => {\n      this.renderer.render(this.stage);\n      context.endFrameEXP();\n    };\n    this.updateResizeMode(resizeMode);\n    this.updateFilters(filters);\n\n    this.props.onReady && this.props.onReady(context);\n  };\n\n  setRef = ref => {\n    this.glView = ref;\n  };\n\n  render() {\n    return (\n      <GLView\n        onLayout={this.onLayout}\n        key={'Expo.FilterImage-' + global.__ExpoSketchId}\n        ref={this.setRef}\n        {...this.props}\n        onContextCreate={this.onContextCreate}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}